/* automatically generated by rust-bindgen */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub const VK_LBUTTON: u32 = 1;
    pub const VK_RBUTTON: u32 = 2;
    pub const VK_MBUTTON: u32 = 4;
    pub const VK_BACK: u32 = 8;
    pub const VK_TAB: u32 = 9;
    pub const VK_CLEAR: u32 = 12;
    pub const VK_RETURN: u32 = 13;
    pub const VK_SHIFT: u32 = 16;
    pub const VK_CONTROL: u32 = 17;
    pub const VK_MENU: u32 = 18;
    pub const VK_PAUSE: u32 = 19;
    pub const VK_CAPITAL: u32 = 20;
    pub const VK_ESCAPE: u32 = 27;
    pub const VK_SPACE: u32 = 32;
    pub const VK_PRIOR: u32 = 33;
    pub const VK_NEXT: u32 = 34;
    pub const VK_END: u32 = 35;
    pub const VK_HOME: u32 = 36;
    pub const VK_LEFT: u32 = 37;
    pub const VK_UP: u32 = 38;
    pub const VK_RIGHT: u32 = 39;
    pub const VK_DOWN: u32 = 40;
    pub const VK_SELECT: u32 = 41;
    pub const VK_PRINT: u32 = 42;
    pub const VK_SNAPSHOT: u32 = 44;
    pub const VK_INSERT: u32 = 45;
    pub const VK_DELETE: u32 = 46;
    pub const VK_HELP: u32 = 47;
    pub const VK_LWIN: u32 = 91;
    pub const VK_NUMPAD0: u32 = 96;
    pub const VK_NUMPAD1: u32 = 97;
    pub const VK_NUMPAD2: u32 = 98;
    pub const VK_NUMPAD3: u32 = 99;
    pub const VK_NUMPAD4: u32 = 100;
    pub const VK_NUMPAD5: u32 = 101;
    pub const VK_NUMPAD6: u32 = 102;
    pub const VK_NUMPAD7: u32 = 103;
    pub const VK_NUMPAD8: u32 = 104;
    pub const VK_NUMPAD9: u32 = 105;
    pub const VK_MULTIPLY: u32 = 106;
    pub const VK_ADD: u32 = 107;
    pub const VK_SEPARATOR: u32 = 108;
    pub const VK_SUBTRACT: u32 = 109;
    pub const VK_DECIMAL: u32 = 110;
    pub const VK_DIVIDE: u32 = 111;
    pub const VK_F1: u32 = 112;
    pub const VK_F2: u32 = 113;
    pub const VK_F3: u32 = 114;
    pub const VK_F4: u32 = 115;
    pub const VK_F5: u32 = 116;
    pub const VK_F6: u32 = 117;
    pub const VK_F7: u32 = 118;
    pub const VK_F8: u32 = 119;
    pub const VK_F9: u32 = 120;
    pub const VK_F10: u32 = 121;
    pub const VK_F11: u32 = 122;
    pub const VK_F12: u32 = 123;
    pub const VK_F13: u32 = 124;
    pub const VK_F14: u32 = 125;
    pub const VK_F15: u32 = 126;
    pub const VK_F16: u32 = 127;
    pub const VK_F17: u32 = 128;
    pub const VK_F18: u32 = 129;
    pub const VK_F19: u32 = 130;
    pub const VK_F20: u32 = 131;
    pub const VK_F21: u32 = 132;
    pub const VK_F22: u32 = 133;
    pub const VK_F23: u32 = 134;
    pub const VK_F24: u32 = 135;
    pub const VK_NUMLOCK: u32 = 144;
    pub const VK_SCROLL: u32 = 145;
    pub const REAPER_PLUGIN_VERSION: u32 = 526;
    pub const CSURF_EXT_RESET: u32 = 131071;
    pub const CSURF_EXT_SETINPUTMONITOR: u32 = 65537;
    pub const CSURF_EXT_SETMETRONOME: u32 = 65538;
    pub const CSURF_EXT_SETAUTORECARM: u32 = 65539;
    pub const CSURF_EXT_SETRECMODE: u32 = 65540;
    pub const CSURF_EXT_SETSENDVOLUME: u32 = 65541;
    pub const CSURF_EXT_SETSENDPAN: u32 = 65542;
    pub const CSURF_EXT_SETFXENABLED: u32 = 65543;
    pub const CSURF_EXT_SETFXPARAM: u32 = 65544;
    pub const CSURF_EXT_SETLASTTOUCHEDFX: u32 = 65546;
    pub const CSURF_EXT_SETFOCUSEDFX: u32 = 65547;
    pub const CSURF_EXT_SETLASTTOUCHEDTRACK: u32 = 65548;
    pub const CSURF_EXT_SETMIXERSCROLL: u32 = 65549;
    pub const CSURF_EXT_SETBPMANDPLAYRATE: u32 = 65545;
    pub const CSURF_EXT_SETPAN_EX: u32 = 65550;
    pub const CSURF_EXT_SETRECVVOLUME: u32 = 65552;
    pub const CSURF_EXT_SETRECVPAN: u32 = 65553;
    pub const CSURF_EXT_SETFXOPEN: u32 = 65554;
    pub const CSURF_EXT_SETFXCHANGE: u32 = 65555;
    pub const CSURF_EXT_SETPROJECTMARKERCHANGE: u32 = 65556;
    pub const CSURF_EXT_SETFXPARAM_RECFX: u32 = 65560;
    pub const CSURF_EXT_SUPPORTS_EXTENDED_TOUCH: u32 = 524289;
    pub const UNDO_STATE_ALL: u32 = 4294967295;
    pub const UNDO_STATE_TRACKCFG: u32 = 1;
    pub const UNDO_STATE_FX: u32 = 2;
    pub const UNDO_STATE_ITEMS: u32 = 4;
    pub const UNDO_STATE_MISCCFG: u32 = 8;
    pub const UNDO_STATE_FREEZE: u32 = 16;
    pub type ReaSample = f64;
    pub type __intptr_t = ::std::os::raw::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct __pthread_internal_list {
        pub __prev: *mut root::__pthread_internal_list,
        pub __next: *mut root::__pthread_internal_list,
    }
    #[test]
    fn bindgen_test_layout___pthread_internal_list() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_internal_list>(),
            16usize,
            concat!("Size of: ", stringify!(__pthread_internal_list))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_internal_list>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_internal_list))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__prev)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__next)
            )
        );
    }
    pub type __pthread_list_t = root::__pthread_internal_list;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct __pthread_mutex_s {
        pub __lock: ::std::os::raw::c_int,
        pub __count: ::std::os::raw::c_uint,
        pub __owner: ::std::os::raw::c_int,
        pub __nusers: ::std::os::raw::c_uint,
        pub __kind: ::std::os::raw::c_int,
        pub __spins: ::std::os::raw::c_short,
        pub __elision: ::std::os::raw::c_short,
        pub __list: root::__pthread_list_t,
    }
    #[test]
    fn bindgen_test_layout___pthread_mutex_s() {
        assert_eq!(
            ::std::mem::size_of::<__pthread_mutex_s>(),
            40usize,
            concat!("Size of: ", stringify!(__pthread_mutex_s))
        );
        assert_eq!(
            ::std::mem::align_of::<__pthread_mutex_s>(),
            8usize,
            concat!("Alignment of ", stringify!(__pthread_mutex_s))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__lock)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__count)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__owner)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__nusers)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__kind)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__spins)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__elision)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__list)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutex_t {
        pub __data: root::__pthread_mutex_s,
        pub __size: [::std::os::raw::c_char; 40usize],
        pub __align: ::std::os::raw::c_long,
        _bindgen_union_align: [u64; 5usize],
    }
    #[test]
    fn bindgen_test_layout_pthread_mutex_t() {
        assert_eq!(
            ::std::mem::size_of::<pthread_mutex_t>(),
            40usize,
            concat!("Size of: ", stringify!(pthread_mutex_t))
        );
        assert_eq!(
            ::std::mem::align_of::<pthread_mutex_t>(),
            8usize,
            concat!("Alignment of ", stringify!(pthread_mutex_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__align)
            )
        );
    }
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    pub mod __gnu_cxx {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    pub type INT_PTR = isize;
    pub type LONG_PTR = isize;
    pub type ULONG_PTR = usize;
    pub type DWORD = ::std::os::raw::c_uint;
    pub type UINT = ::std::os::raw::c_uint;
    pub type WPARAM = root::ULONG_PTR;
    pub type LPARAM = root::LONG_PTR;
    pub type LRESULT = root::LONG_PTR;
    pub type LONG = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HWND__ {
        _unused: [u8; 0],
    }
    pub type HWND = *mut root::HWND__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HMENU__ {
        _unused: [u8; 0],
    }
    pub type HMENU = *mut root::HMENU__;
    pub type HINSTANCE = *mut ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct POINT {
        pub x: root::LONG,
        pub y: root::LONG,
    }
    #[test]
    fn bindgen_test_layout_POINT() {
        assert_eq!(
            ::std::mem::size_of::<POINT>(),
            8usize,
            concat!("Size of: ", stringify!(POINT))
        );
        assert_eq!(
            ::std::mem::align_of::<POINT>(),
            4usize,
            concat!("Alignment of ", stringify!(POINT))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<POINT>())).x as *const _ as usize },
            0usize,
            concat!("Offset of field: ", stringify!(POINT), "::", stringify!(x))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<POINT>())).y as *const _ as usize },
            4usize,
            concat!("Offset of field: ", stringify!(POINT), "::", stringify!(y))
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct RECT {
        pub left: root::LONG,
        pub top: root::LONG,
        pub right: root::LONG,
        pub bottom: root::LONG,
    }
    #[test]
    fn bindgen_test_layout_RECT() {
        assert_eq!(
            ::std::mem::size_of::<RECT>(),
            16usize,
            concat!("Size of: ", stringify!(RECT))
        );
        assert_eq!(
            ::std::mem::align_of::<RECT>(),
            4usize,
            concat!("Alignment of ", stringify!(RECT))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RECT>())).left as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RECT),
                "::",
                stringify!(left)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RECT>())).top as *const _ as usize },
            4usize,
            concat!("Offset of field: ", stringify!(RECT), "::", stringify!(top))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RECT>())).right as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RECT),
                "::",
                stringify!(right)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<RECT>())).bottom as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(RECT),
                "::",
                stringify!(bottom)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct ACCEL {
        pub fVirt: ::std::os::raw::c_uchar,
        pub key: ::std::os::raw::c_ushort,
        pub cmd: ::std::os::raw::c_ushort,
    }
    #[test]
    fn bindgen_test_layout_ACCEL() {
        assert_eq!(
            ::std::mem::size_of::<ACCEL>(),
            6usize,
            concat!("Size of: ", stringify!(ACCEL))
        );
        assert_eq!(
            ::std::mem::align_of::<ACCEL>(),
            2usize,
            concat!("Alignment of ", stringify!(ACCEL))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ACCEL>())).fVirt as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ACCEL),
                "::",
                stringify!(fVirt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ACCEL>())).key as *const _ as usize },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(ACCEL),
                "::",
                stringify!(key)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ACCEL>())).cmd as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ACCEL),
                "::",
                stringify!(cmd)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct _GUID {
        pub Data1: ::std::os::raw::c_uint,
        pub Data2: ::std::os::raw::c_ushort,
        pub Data3: ::std::os::raw::c_ushort,
        pub Data4: [::std::os::raw::c_uchar; 8usize],
    }
    #[test]
    fn bindgen_test_layout__GUID() {
        assert_eq!(
            ::std::mem::size_of::<_GUID>(),
            16usize,
            concat!("Size of: ", stringify!(_GUID))
        );
        assert_eq!(
            ::std::mem::align_of::<_GUID>(),
            4usize,
            concat!("Alignment of ", stringify!(_GUID))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_GUID>())).Data1 as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_GUID),
                "::",
                stringify!(Data1)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_GUID>())).Data2 as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_GUID),
                "::",
                stringify!(Data2)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_GUID>())).Data3 as *const _ as usize },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(_GUID),
                "::",
                stringify!(Data3)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<_GUID>())).Data4 as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_GUID),
                "::",
                stringify!(Data4)
            )
        );
    }
    pub type GUID = root::_GUID;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct MSG {
        pub hwnd: root::HWND,
        pub message: root::UINT,
        pub wParam: root::WPARAM,
        pub lParam: root::LPARAM,
        pub time: root::DWORD,
        pub pt: root::POINT,
    }
    #[test]
    fn bindgen_test_layout_MSG() {
        assert_eq!(
            ::std::mem::size_of::<MSG>(),
            48usize,
            concat!("Size of: ", stringify!(MSG))
        );
        assert_eq!(
            ::std::mem::align_of::<MSG>(),
            8usize,
            concat!("Alignment of ", stringify!(MSG))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MSG>())).hwnd as *const _ as usize },
            0usize,
            concat!("Offset of field: ", stringify!(MSG), "::", stringify!(hwnd))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MSG>())).message as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(MSG),
                "::",
                stringify!(message)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MSG>())).wParam as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(MSG),
                "::",
                stringify!(wParam)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MSG>())).lParam as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(MSG),
                "::",
                stringify!(lParam)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MSG>())).time as *const _ as usize },
            32usize,
            concat!("Offset of field: ", stringify!(MSG), "::", stringify!(time))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MSG>())).pt as *const _ as usize },
            36usize,
            concat!("Offset of field: ", stringify!(MSG), "::", stringify!(pt))
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HDC__ {
        _unused: [u8; 0],
    }
    pub type HDC = *mut root::HDC__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HGDIOBJ__ {
        _unused: [u8; 0],
    }
    pub type HFONT = *mut root::HGDIOBJ__;
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct reaper_plugin_info_t {
        pub caller_version: ::std::os::raw::c_int,
        pub hwnd_main: root::HWND,
        pub Register: ::std::option::Option<
            unsafe extern "C" fn(
                name: *const ::std::os::raw::c_char,
                infostruct: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        pub GetFunc: ::std::option::Option<
            unsafe extern "C" fn(
                name: *const ::std::os::raw::c_char,
            ) -> *mut ::std::os::raw::c_void,
        >,
    }
    #[test]
    fn bindgen_test_layout_reaper_plugin_info_t() {
        assert_eq!(
            ::std::mem::size_of::<reaper_plugin_info_t>(),
            32usize,
            concat!("Size of: ", stringify!(reaper_plugin_info_t))
        );
        assert_eq!(
            ::std::mem::align_of::<reaper_plugin_info_t>(),
            8usize,
            concat!("Alignment of ", stringify!(reaper_plugin_info_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<reaper_plugin_info_t>())).caller_version as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(reaper_plugin_info_t),
                "::",
                stringify!(caller_version)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<reaper_plugin_info_t>())).hwnd_main as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(reaper_plugin_info_t),
                "::",
                stringify!(hwnd_main)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<reaper_plugin_info_t>())).Register as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(reaper_plugin_info_t),
                "::",
                stringify!(Register)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<reaper_plugin_info_t>())).GetFunc as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(reaper_plugin_info_t),
                "::",
                stringify!(GetFunc)
            )
        );
    }
    #[repr(C)]
    pub struct ProjectStateContext__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct ProjectStateContext {
        pub vtable_: *const ProjectStateContext__bindgen_vtable,
    }
    #[test]
    fn bindgen_test_layout_ProjectStateContext() {
        assert_eq!(
            ::std::mem::size_of::<ProjectStateContext>(),
            8usize,
            concat!("Size of: ", stringify!(ProjectStateContext))
        );
        assert_eq!(
            ::std::mem::align_of::<ProjectStateContext>(),
            8usize,
            concat!("Alignment of ", stringify!(ProjectStateContext))
        );
    }
    #[doc = " MIDI event definition and abstract list"]
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct MIDI_event_t {
        pub frame_offset: ::std::os::raw::c_int,
        pub size: ::std::os::raw::c_int,
        pub midi_message: [::std::os::raw::c_uchar; 4usize],
    }
    #[test]
    fn bindgen_test_layout_MIDI_event_t() {
        assert_eq!(
            ::std::mem::size_of::<MIDI_event_t>(),
            12usize,
            concat!("Size of: ", stringify!(MIDI_event_t))
        );
        assert_eq!(
            ::std::mem::align_of::<MIDI_event_t>(),
            4usize,
            concat!("Alignment of ", stringify!(MIDI_event_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MIDI_event_t>())).frame_offset as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(MIDI_event_t),
                "::",
                stringify!(frame_offset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MIDI_event_t>())).size as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(MIDI_event_t),
                "::",
                stringify!(size)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<MIDI_event_t>())).midi_message as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(MIDI_event_t),
                "::",
                stringify!(midi_message)
            )
        );
    }
    #[repr(C)]
    pub struct MIDI_eventlist__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct MIDI_eventlist {
        pub vtable_: *const MIDI_eventlist__bindgen_vtable,
    }
    #[test]
    fn bindgen_test_layout_MIDI_eventlist() {
        assert_eq!(
            ::std::mem::size_of::<MIDI_eventlist>(),
            8usize,
            concat!("Size of: ", stringify!(MIDI_eventlist))
        );
        assert_eq!(
            ::std::mem::align_of::<MIDI_eventlist>(),
            8usize,
            concat!("Alignment of ", stringify!(MIDI_eventlist))
        );
    }
    #[doc = " PCM source API"]
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialEq)]
    pub struct PCM_source_transfer_t {
        pub time_s: f64,
        pub samplerate: f64,
        pub nch: ::std::os::raw::c_int,
        pub length: ::std::os::raw::c_int,
        pub samples: *mut root::ReaSample,
        pub samples_out: ::std::os::raw::c_int,
        pub midi_events: *mut root::MIDI_eventlist,
        pub approximate_playback_latency: f64,
        pub absolute_time_s: f64,
        pub force_bpm: f64,
    }
    #[test]
    fn bindgen_test_layout_PCM_source_transfer_t() {
        assert_eq!(
            ::std::mem::size_of::<PCM_source_transfer_t>(),
            72usize,
            concat!("Size of: ", stringify!(PCM_source_transfer_t))
        );
        assert_eq!(
            ::std::mem::align_of::<PCM_source_transfer_t>(),
            8usize,
            concat!("Alignment of ", stringify!(PCM_source_transfer_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_transfer_t>())).time_s as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_transfer_t),
                "::",
                stringify!(time_s)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_transfer_t>())).samplerate as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_transfer_t),
                "::",
                stringify!(samplerate)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<PCM_source_transfer_t>())).nch as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_transfer_t),
                "::",
                stringify!(nch)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_transfer_t>())).length as *const _ as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_transfer_t),
                "::",
                stringify!(length)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_transfer_t>())).samples as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_transfer_t),
                "::",
                stringify!(samples)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_transfer_t>())).samples_out as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_transfer_t),
                "::",
                stringify!(samples_out)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_transfer_t>())).midi_events as *const _ as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_transfer_t),
                "::",
                stringify!(midi_events)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_transfer_t>())).approximate_playback_latency
                    as *const _ as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_transfer_t),
                "::",
                stringify!(approximate_playback_latency)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_transfer_t>())).absolute_time_s as *const _
                    as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_transfer_t),
                "::",
                stringify!(absolute_time_s)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_transfer_t>())).force_bpm as *const _ as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_transfer_t),
                "::",
                stringify!(force_bpm)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, PartialEq)]
    pub struct PCM_source_peaktransfer_t {
        pub start_time: f64,
        pub peakrate: f64,
        pub numpeak_points: ::std::os::raw::c_int,
        pub nchpeaks: ::std::os::raw::c_int,
        pub peaks: *mut root::ReaSample,
        pub peaks_out: ::std::os::raw::c_int,
        pub output_mode: ::std::os::raw::c_int,
        pub absolute_time_s: f64,
        pub peaks_minvals: *mut root::ReaSample,
        pub peaks_minvals_used: ::std::os::raw::c_int,
        pub samplerate: f64,
        pub exp: [*mut ::std::os::raw::c_int; 30usize],
    }
    pub const PCM_source_peaktransfer_t_PEAKTRANSFER_PEAKS_MODE:
        root::PCM_source_peaktransfer_t__bindgen_ty_1 = 0;
    pub const PCM_source_peaktransfer_t_PEAKTRANSFER_WAVEFORM_MODE:
        root::PCM_source_peaktransfer_t__bindgen_ty_1 = 1;
    pub const PCM_source_peaktransfer_t_PEAKTRANSFER_MIDI_NOTE_MODE:
        root::PCM_source_peaktransfer_t__bindgen_ty_1 = 2;
    pub const PCM_source_peaktransfer_t_PEAKTRANSFER_MIDI_DRUM_MODE:
        root::PCM_source_peaktransfer_t__bindgen_ty_1 = 3;
    pub const PCM_source_peaktransfer_t_PEAKTRANSFER_MIDI_DRUM_TRIANGLE_MODE:
        root::PCM_source_peaktransfer_t__bindgen_ty_1 = 4;
    pub type PCM_source_peaktransfer_t__bindgen_ty_1 = u32;
    #[test]
    fn bindgen_test_layout_PCM_source_peaktransfer_t() {
        assert_eq!(
            ::std::mem::size_of::<PCM_source_peaktransfer_t>(),
            312usize,
            concat!("Size of: ", stringify!(PCM_source_peaktransfer_t))
        );
        assert_eq!(
            ::std::mem::align_of::<PCM_source_peaktransfer_t>(),
            8usize,
            concat!("Alignment of ", stringify!(PCM_source_peaktransfer_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_peaktransfer_t>())).start_time as *const _
                    as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_peaktransfer_t),
                "::",
                stringify!(start_time)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_peaktransfer_t>())).peakrate as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_peaktransfer_t),
                "::",
                stringify!(peakrate)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_peaktransfer_t>())).numpeak_points as *const _
                    as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_peaktransfer_t),
                "::",
                stringify!(numpeak_points)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_peaktransfer_t>())).nchpeaks as *const _ as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_peaktransfer_t),
                "::",
                stringify!(nchpeaks)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_peaktransfer_t>())).peaks as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_peaktransfer_t),
                "::",
                stringify!(peaks)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_peaktransfer_t>())).peaks_out as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_peaktransfer_t),
                "::",
                stringify!(peaks_out)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_peaktransfer_t>())).output_mode as *const _
                    as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_peaktransfer_t),
                "::",
                stringify!(output_mode)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_peaktransfer_t>())).absolute_time_s as *const _
                    as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_peaktransfer_t),
                "::",
                stringify!(absolute_time_s)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_peaktransfer_t>())).peaks_minvals as *const _
                    as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_peaktransfer_t),
                "::",
                stringify!(peaks_minvals)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_peaktransfer_t>())).peaks_minvals_used as *const _
                    as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_peaktransfer_t),
                "::",
                stringify!(peaks_minvals_used)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_peaktransfer_t>())).samplerate as *const _
                    as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_peaktransfer_t),
                "::",
                stringify!(samplerate)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<PCM_source_peaktransfer_t>())).exp as *const _ as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_source_peaktransfer_t),
                "::",
                stringify!(exp)
            )
        );
    }
    #[repr(C)]
    pub struct PCM_source__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct PCM_source {
        pub vtable_: *const PCM_source__bindgen_vtable,
    }
    #[test]
    fn bindgen_test_layout_PCM_source() {
        assert_eq!(
            ::std::mem::size_of::<PCM_source>(),
            8usize,
            concat!("Size of: ", stringify!(PCM_source))
        );
        assert_eq!(
            ::std::mem::align_of::<PCM_source>(),
            8usize,
            concat!("Alignment of ", stringify!(PCM_source))
        );
    }
    #[repr(C)]
    pub struct ISimpleMediaDecoder__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct ISimpleMediaDecoder {
        pub vtable_: *const ISimpleMediaDecoder__bindgen_vtable,
    }
    #[test]
    fn bindgen_test_layout_ISimpleMediaDecoder() {
        assert_eq!(
            ::std::mem::size_of::<ISimpleMediaDecoder>(),
            8usize,
            concat!("Size of: ", stringify!(ISimpleMediaDecoder))
        );
        assert_eq!(
            ::std::mem::align_of::<ISimpleMediaDecoder>(),
            8usize,
            concat!("Alignment of ", stringify!(ISimpleMediaDecoder))
        );
    }
    #[repr(C)]
    pub struct PCM_sink__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, PartialEq)]
    pub struct PCM_sink {
        pub vtable_: *const PCM_sink__bindgen_vtable,
        pub m_st: f64,
    }
    #[test]
    fn bindgen_test_layout_PCM_sink() {
        assert_eq!(
            ::std::mem::size_of::<PCM_sink>(),
            16usize,
            concat!("Size of: ", stringify!(PCM_sink))
        );
        assert_eq!(
            ::std::mem::align_of::<PCM_sink>(),
            8usize,
            concat!("Alignment of ", stringify!(PCM_sink))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<PCM_sink>())).m_st as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(PCM_sink),
                "::",
                stringify!(m_st)
            )
        );
    }
    #[repr(C)]
    pub struct REAPER_Resample_Interface__bindgen_vtable(::std::os::raw::c_void);
    #[doc = " Resampler API (plug-ins can use this for SRC)"]
    #[doc = ""]
    #[doc = ""]
    #[doc = " See API functions Resampler_Create() and Resample_EnumModes()"]
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct REAPER_Resample_Interface {
        pub vtable_: *const REAPER_Resample_Interface__bindgen_vtable,
    }
    #[test]
    fn bindgen_test_layout_REAPER_Resample_Interface() {
        assert_eq!(
            ::std::mem::size_of::<REAPER_Resample_Interface>(),
            8usize,
            concat!("Size of: ", stringify!(REAPER_Resample_Interface))
        );
        assert_eq!(
            ::std::mem::align_of::<REAPER_Resample_Interface>(),
            8usize,
            concat!("Alignment of ", stringify!(REAPER_Resample_Interface))
        );
    }
    #[repr(C)]
    pub struct IReaperPitchShift__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct IReaperPitchShift {
        pub vtable_: *const IReaperPitchShift__bindgen_vtable,
    }
    #[test]
    fn bindgen_test_layout_IReaperPitchShift() {
        assert_eq!(
            ::std::mem::size_of::<IReaperPitchShift>(),
            8usize,
            concat!("Size of: ", stringify!(IReaperPitchShift))
        );
        assert_eq!(
            ::std::mem::align_of::<IReaperPitchShift>(),
            8usize,
            concat!("Alignment of ", stringify!(IReaperPitchShift))
        );
    }
    #[repr(C)]
    pub struct REAPER_PeakGet_Interface__bindgen_vtable(::std::os::raw::c_void);
    #[doc = " Peak getting/building API"]
    #[doc = ""]
    #[doc = " These are really only needed if you implement a PCM_source or PCM_sink."]
    #[doc = ""]
    #[doc = " See functions PeakGet_Create(), PeakBuild_Create(), GetPeakFileName(), ClearPeakCache()"]
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct REAPER_PeakGet_Interface {
        pub vtable_: *const REAPER_PeakGet_Interface__bindgen_vtable,
    }
    #[test]
    fn bindgen_test_layout_REAPER_PeakGet_Interface() {
        assert_eq!(
            ::std::mem::size_of::<REAPER_PeakGet_Interface>(),
            8usize,
            concat!("Size of: ", stringify!(REAPER_PeakGet_Interface))
        );
        assert_eq!(
            ::std::mem::align_of::<REAPER_PeakGet_Interface>(),
            8usize,
            concat!("Alignment of ", stringify!(REAPER_PeakGet_Interface))
        );
    }
    #[repr(C)]
    pub struct REAPER_PeakBuild_Interface__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct REAPER_PeakBuild_Interface {
        pub vtable_: *const REAPER_PeakBuild_Interface__bindgen_vtable,
    }
    #[test]
    fn bindgen_test_layout_REAPER_PeakBuild_Interface() {
        assert_eq!(
            ::std::mem::size_of::<REAPER_PeakBuild_Interface>(),
            8usize,
            concat!("Size of: ", stringify!(REAPER_PeakBuild_Interface))
        );
        assert_eq!(
            ::std::mem::align_of::<REAPER_PeakBuild_Interface>(),
            8usize,
            concat!("Alignment of ", stringify!(REAPER_PeakBuild_Interface))
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct gaccel_register_t {
        pub accel: root::ACCEL,
        pub desc: *const ::std::os::raw::c_char,
    }
    #[test]
    fn bindgen_test_layout_gaccel_register_t() {
        assert_eq!(
            ::std::mem::size_of::<gaccel_register_t>(),
            16usize,
            concat!("Size of: ", stringify!(gaccel_register_t))
        );
        assert_eq!(
            ::std::mem::align_of::<gaccel_register_t>(),
            8usize,
            concat!("Alignment of ", stringify!(gaccel_register_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<gaccel_register_t>())).accel as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(gaccel_register_t),
                "::",
                stringify!(accel)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<gaccel_register_t>())).desc as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(gaccel_register_t),
                "::",
                stringify!(desc)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct audio_hook_register_t {
        pub OnAudioBuffer: ::std::option::Option<
            unsafe extern "C" fn(
                isPost: bool,
                len: ::std::os::raw::c_int,
                srate: f64,
                reg: *mut root::audio_hook_register_t,
            ),
        >,
        pub userdata1: *mut ::std::os::raw::c_void,
        pub userdata2: *mut ::std::os::raw::c_void,
        pub input_nch: ::std::os::raw::c_int,
        pub output_nch: ::std::os::raw::c_int,
        pub GetBuffer: ::std::option::Option<
            unsafe extern "C" fn(
                isOutput: bool,
                idx: ::std::os::raw::c_int,
            ) -> *mut root::ReaSample,
        >,
    }
    #[test]
    fn bindgen_test_layout_audio_hook_register_t() {
        assert_eq!(
            ::std::mem::size_of::<audio_hook_register_t>(),
            40usize,
            concat!("Size of: ", stringify!(audio_hook_register_t))
        );
        assert_eq!(
            ::std::mem::align_of::<audio_hook_register_t>(),
            8usize,
            concat!("Alignment of ", stringify!(audio_hook_register_t))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<audio_hook_register_t>())).OnAudioBuffer as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(audio_hook_register_t),
                "::",
                stringify!(OnAudioBuffer)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<audio_hook_register_t>())).userdata1 as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(audio_hook_register_t),
                "::",
                stringify!(userdata1)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<audio_hook_register_t>())).userdata2 as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(audio_hook_register_t),
                "::",
                stringify!(userdata2)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<audio_hook_register_t>())).input_nch as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(audio_hook_register_t),
                "::",
                stringify!(input_nch)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<audio_hook_register_t>())).output_nch as *const _ as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(audio_hook_register_t),
                "::",
                stringify!(output_nch)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<audio_hook_register_t>())).GetBuffer as *const _ as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(audio_hook_register_t),
                "::",
                stringify!(GetBuffer)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct KbdCmd {
        pub cmd: root::DWORD,
        pub text: *const ::std::os::raw::c_char,
    }
    #[test]
    fn bindgen_test_layout_KbdCmd() {
        assert_eq!(
            ::std::mem::size_of::<KbdCmd>(),
            16usize,
            concat!("Size of: ", stringify!(KbdCmd))
        );
        assert_eq!(
            ::std::mem::align_of::<KbdCmd>(),
            8usize,
            concat!("Alignment of ", stringify!(KbdCmd))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<KbdCmd>())).cmd as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(KbdCmd),
                "::",
                stringify!(cmd)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<KbdCmd>())).text as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(KbdCmd),
                "::",
                stringify!(text)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct KbdKeyBindingInfo {
        pub key: ::std::os::raw::c_int,
        pub cmd: ::std::os::raw::c_int,
        pub flags: ::std::os::raw::c_int,
    }
    #[test]
    fn bindgen_test_layout_KbdKeyBindingInfo() {
        assert_eq!(
            ::std::mem::size_of::<KbdKeyBindingInfo>(),
            12usize,
            concat!("Size of: ", stringify!(KbdKeyBindingInfo))
        );
        assert_eq!(
            ::std::mem::align_of::<KbdKeyBindingInfo>(),
            4usize,
            concat!("Alignment of ", stringify!(KbdKeyBindingInfo))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<KbdKeyBindingInfo>())).key as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(KbdKeyBindingInfo),
                "::",
                stringify!(key)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<KbdKeyBindingInfo>())).cmd as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(KbdKeyBindingInfo),
                "::",
                stringify!(cmd)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<KbdKeyBindingInfo>())).flags as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(KbdKeyBindingInfo),
                "::",
                stringify!(flags)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
    pub struct KbdSectionInfo {
        pub uniqueID: ::std::os::raw::c_int,
        pub name: *const ::std::os::raw::c_char,
        pub action_list: *mut root::KbdCmd,
        pub action_list_cnt: ::std::os::raw::c_int,
        pub def_keys: *mut root::KbdKeyBindingInfo,
        pub def_keys_cnt: ::std::os::raw::c_int,
        pub onAction: ::std::option::Option<
            unsafe extern "C" fn(
                cmd: ::std::os::raw::c_int,
                val: ::std::os::raw::c_int,
                valhw: ::std::os::raw::c_int,
                relmode: ::std::os::raw::c_int,
                hwnd: root::HWND,
            ) -> bool,
        >,
        pub accels: *mut ::std::os::raw::c_void,
        pub recent_cmds: *mut ::std::os::raw::c_void,
        pub extended_data: [*mut ::std::os::raw::c_void; 32usize],
    }
    #[test]
    fn bindgen_test_layout_KbdSectionInfo() {
        assert_eq!(
            ::std::mem::size_of::<KbdSectionInfo>(),
            328usize,
            concat!("Size of: ", stringify!(KbdSectionInfo))
        );
        assert_eq!(
            ::std::mem::align_of::<KbdSectionInfo>(),
            8usize,
            concat!("Alignment of ", stringify!(KbdSectionInfo))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<KbdSectionInfo>())).uniqueID as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(KbdSectionInfo),
                "::",
                stringify!(uniqueID)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<KbdSectionInfo>())).name as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(KbdSectionInfo),
                "::",
                stringify!(name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<KbdSectionInfo>())).action_list as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(KbdSectionInfo),
                "::",
                stringify!(action_list)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<KbdSectionInfo>())).action_list_cnt as *const _ as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(KbdSectionInfo),
                "::",
                stringify!(action_list_cnt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<KbdSectionInfo>())).def_keys as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(KbdSectionInfo),
                "::",
                stringify!(def_keys)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<KbdSectionInfo>())).def_keys_cnt as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(KbdSectionInfo),
                "::",
                stringify!(def_keys_cnt)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<KbdSectionInfo>())).onAction as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(KbdSectionInfo),
                "::",
                stringify!(onAction)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<KbdSectionInfo>())).accels as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(KbdSectionInfo),
                "::",
                stringify!(accels)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<KbdSectionInfo>())).recent_cmds as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(KbdSectionInfo),
                "::",
                stringify!(recent_cmds)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<KbdSectionInfo>())).extended_data as *const _ as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(KbdSectionInfo),
                "::",
                stringify!(extended_data)
            )
        );
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct preview_register_t {
        pub mutex: root::pthread_mutex_t,
        pub src: *mut root::PCM_source,
        pub m_out_chan: ::std::os::raw::c_int,
        pub curpos: f64,
        pub loop_: bool,
        pub volume: f64,
        pub peakvol: [f64; 2usize],
        pub preview_track: *mut ::std::os::raw::c_void,
    }
    #[test]
    fn bindgen_test_layout_preview_register_t() {
        assert_eq!(
            ::std::mem::size_of::<preview_register_t>(),
            104usize,
            concat!("Size of: ", stringify!(preview_register_t))
        );
        assert_eq!(
            ::std::mem::align_of::<preview_register_t>(),
            8usize,
            concat!("Alignment of ", stringify!(preview_register_t))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<preview_register_t>())).mutex as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(preview_register_t),
                "::",
                stringify!(mutex)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<preview_register_t>())).src as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(preview_register_t),
                "::",
                stringify!(src)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<preview_register_t>())).m_out_chan as *const _ as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(preview_register_t),
                "::",
                stringify!(m_out_chan)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<preview_register_t>())).curpos as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(preview_register_t),
                "::",
                stringify!(curpos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<preview_register_t>())).loop_ as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(preview_register_t),
                "::",
                stringify!(loop_)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<preview_register_t>())).volume as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(preview_register_t),
                "::",
                stringify!(volume)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<preview_register_t>())).peakvol as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(preview_register_t),
                "::",
                stringify!(peakvol)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<preview_register_t>())).preview_track as *const _ as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(preview_register_t),
                "::",
                stringify!(preview_track)
            )
        );
    }
    pub type screensetNewCallbackFunc = ::std::option::Option<
        unsafe extern "C" fn(
            action: ::std::os::raw::c_int,
            id: *const ::std::os::raw::c_char,
            param: *mut ::std::os::raw::c_void,
            actionParm: *mut ::std::os::raw::c_void,
            actionParmSize: ::std::os::raw::c_int,
        ) -> root::LRESULT,
    >;
    #[repr(C)]
    pub struct midi_Output__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct midi_Output {
        pub vtable_: *const midi_Output__bindgen_vtable,
    }
    #[test]
    fn bindgen_test_layout_midi_Output() {
        assert_eq!(
            ::std::mem::size_of::<midi_Output>(),
            8usize,
            concat!("Size of: ", stringify!(midi_Output))
        );
        assert_eq!(
            ::std::mem::align_of::<midi_Output>(),
            8usize,
            concat!("Alignment of ", stringify!(midi_Output))
        );
    }
    #[repr(C)]
    pub struct midi_Input__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct midi_Input {
        pub vtable_: *const midi_Input__bindgen_vtable,
    }
    #[test]
    fn bindgen_test_layout_midi_Input() {
        assert_eq!(
            ::std::mem::size_of::<midi_Input>(),
            8usize,
            concat!("Size of: ", stringify!(midi_Input))
        );
        assert_eq!(
            ::std::mem::align_of::<midi_Input>(),
            8usize,
            concat!("Alignment of ", stringify!(midi_Input))
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ReaProject {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MediaTrack {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MediaItem {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MediaItem_Take {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct TrackEnvelope {
        _unused: [u8; 0],
    }
    #[repr(C)]
    pub struct IReaperControlSurface__bindgen_vtable(::std::os::raw::c_void);
    #[repr(C)]
    #[derive(Debug, Hash, PartialEq, Eq)]
    pub struct IReaperControlSurface {
        pub vtable_: *const IReaperControlSurface__bindgen_vtable,
    }
    #[test]
    fn bindgen_test_layout_IReaperControlSurface() {
        assert_eq!(
            ::std::mem::size_of::<IReaperControlSurface>(),
            8usize,
            concat!("Size of: ", stringify!(IReaperControlSurface))
        );
        assert_eq!(
            ::std::mem::align_of::<IReaperControlSurface>(),
            8usize,
            concat!("Alignment of ", stringify!(IReaperControlSurface))
        );
    }
    pub mod reaper_functions {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type LICE_pixel = ::std::os::raw::c_uint;
        pub type LICE_pixel_chan = ::std::os::raw::c_uchar;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LICE_IBitmap {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LICE_IFont {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct WDL_VirtualWnd_BGCfg {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct AudioAccessor {
            _unused: [u8; 0],
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct joystick_device {
            _unused: [u8; 0],
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11__mergesortE"]
            pub static mut __mergesort: ::std::option::Option<
                unsafe extern "C" fn(
                    base: *mut ::std::os::raw::c_void,
                    nmemb: usize,
                    size: usize,
                    cmpfunc: ::std::option::Option<
                        unsafe extern "C" fn(
                            arg1: *const ::std::os::raw::c_void,
                            arg2: *const ::std::os::raw::c_void,
                        ) -> ::std::os::raw::c_int,
                    >,
                    tmpspace: *mut ::std::os::raw::c_void,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19AddCustomizableMenuE"]
            pub static mut AddCustomizableMenu: ::std::option::Option<
                unsafe extern "C" fn(
                    menuidstr: *const ::std::os::raw::c_char,
                    menuname: *const ::std::os::raw::c_char,
                    kbdsecname: *const ::std::os::raw::c_char,
                    addtomainmenu: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21AddExtensionsMainMenuE"]
            pub static mut AddExtensionsMainMenu:
                ::std::option::Option<unsafe extern "C" fn() -> bool>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19AddMediaItemToTrackE"]
            pub static mut AddMediaItemToTrack: ::std::option::Option<
                unsafe extern "C" fn(tr: *mut root::MediaTrack) -> *mut root::MediaItem,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16AddProjectMarkerE"]
            pub static mut AddProjectMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    isrgn: bool,
                    pos: f64,
                    rgnend: f64,
                    name: *const ::std::os::raw::c_char,
                    wantidx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17AddProjectMarker2E"]
            pub static mut AddProjectMarker2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    isrgn: bool,
                    pos: f64,
                    rgnend: f64,
                    name: *const ::std::os::raw::c_char,
                    wantidx: ::std::os::raw::c_int,
                    color: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18AddRemoveReaScriptE"]
            pub static mut AddRemoveReaScript: ::std::option::Option<
                unsafe extern "C" fn(
                    add: bool,
                    sectionID: ::std::os::raw::c_int,
                    scriptfn: *const ::std::os::raw::c_char,
                    commit: bool,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18AddTakeToMediaItemE"]
            pub static mut AddTakeToMediaItem: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem) -> *mut root::MediaItem_Take,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21AddTempoTimeSigMarkerE"]
            pub static mut AddTempoTimeSigMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    timepos: f64,
                    bpm: f64,
                    timesig_num: ::std::os::raw::c_int,
                    timesig_denom: ::std::os::raw::c_int,
                    lineartempochange: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10adjustZoomE"]
            pub static mut adjustZoom: ::std::option::Option<
                unsafe extern "C" fn(
                    amt: f64,
                    forceset: ::std::os::raw::c_int,
                    doupd: bool,
                    centermode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12AnyTrackSoloE"]
            pub static mut AnyTrackSolo:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject) -> bool>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions9APIExistsE"]
            pub static mut APIExists: ::std::option::Option<
                unsafe extern "C" fn(function_name: *const ::std::os::raw::c_char) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions7APITestE"]
            pub static mut APITest: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10ApplyNudgeE"]
            pub static mut ApplyNudge: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    nudgeflag: ::std::os::raw::c_int,
                    nudgewhat: ::std::os::raw::c_int,
                    nudgeunits: ::std::os::raw::c_int,
                    value: f64,
                    reverse: bool,
                    copies: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10ArmCommandE"]
            pub static mut ArmCommand: ::std::option::Option<
                unsafe extern "C" fn(
                    cmd: ::std::os::raw::c_int,
                    sectionname: *const ::std::os::raw::c_char,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10Audio_InitE"]
            pub static mut Audio_Init: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17Audio_IsPreBufferE"]
            pub static mut Audio_IsPreBuffer:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15Audio_IsRunningE"]
            pub static mut Audio_IsRunning:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10Audio_QuitE"]
            pub static mut Audio_Quit: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21Audio_RegHardwareHookE"]
            pub static mut Audio_RegHardwareHook: ::std::option::Option<
                unsafe extern "C" fn(
                    isAdd: bool,
                    reg: *mut root::audio_hook_register_t,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25AudioAccessorStateChangedE"]
            pub static mut AudioAccessorStateChanged: ::std::option::Option<
                unsafe extern "C" fn(accessor: *mut root::reaper_functions::AudioAccessor) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19AudioAccessorUpdateE"]
            pub static mut AudioAccessorUpdate: ::std::option::Option<
                unsafe extern "C" fn(accessor: *mut root::reaper_functions::AudioAccessor),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26AudioAccessorValidateStateE"]
            pub static mut AudioAccessorValidateState: ::std::option::Option<
                unsafe extern "C" fn(accessor: *mut root::reaper_functions::AudioAccessor) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17BypassFxAllTracksE"]
            pub static mut BypassFxAllTracks:
                ::std::option::Option<unsafe extern "C" fn(bypass: ::std::os::raw::c_int)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14CalculatePeaksE"]
            pub static mut CalculatePeaks: ::std::option::Option<
                unsafe extern "C" fn(
                    srcBlock: *mut root::PCM_source_transfer_t,
                    pksBlock: *mut root::PCM_source_peaktransfer_t,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25CalculatePeaksFloatSrcPtrE"]
            pub static mut CalculatePeaksFloatSrcPtr: ::std::option::Option<
                unsafe extern "C" fn(
                    srcBlock: *mut root::PCM_source_transfer_t,
                    pksBlock: *mut root::PCM_source_peaktransfer_t,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16ClearAllRecArmedE"]
            pub static mut ClearAllRecArmed: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12ClearConsoleE"]
            pub static mut ClearConsole: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14ClearPeakCacheE"]
            pub static mut ClearPeakCache: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15ColorFromNativeE"]
            pub static mut ColorFromNative: ::std::option::Option<
                unsafe extern "C" fn(
                    col: ::std::os::raw::c_int,
                    rOut: *mut ::std::os::raw::c_int,
                    gOut: *mut ::std::os::raw::c_int,
                    bOut: *mut ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13ColorToNativeE"]
            pub static mut ColorToNative: ::std::option::Option<
                unsafe extern "C" fn(
                    r: ::std::os::raw::c_int,
                    g: ::std::os::raw::c_int,
                    b: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CountActionShortcutsE"]
            pub static mut CountActionShortcuts: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *mut root::KbdSectionInfo,
                    cmdID: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CountAutomationItemsE"]
            pub static mut CountAutomationItems: ::std::option::Option<
                unsafe extern "C" fn(env: *mut root::TrackEnvelope) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19CountEnvelopePointsE"]
            pub static mut CountEnvelopePoints: ::std::option::Option<
                unsafe extern "C" fn(envelope: *mut root::TrackEnvelope) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21CountEnvelopePointsExE"]
            pub static mut CountEnvelopePointsEx: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15CountMediaItemsE"]
            pub static mut CountMediaItems: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19CountProjectMarkersE"]
            pub static mut CountProjectMarkers: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    num_markersOut: *mut ::std::os::raw::c_int,
                    num_regionsOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23CountSelectedMediaItemsE"]
            pub static mut CountSelectedMediaItems: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19CountSelectedTracksE"]
            pub static mut CountSelectedTracks: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CountSelectedTracks2E"]
            pub static mut CountSelectedTracks2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    wantmaster: bool,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18CountTakeEnvelopesE"]
            pub static mut CountTakeEnvelopes: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10CountTakesE"]
            pub static mut CountTakes: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15CountTCPFXParmsE"]
            pub static mut CountTCPFXParms: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    track: *mut root::MediaTrack,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24CountTempoTimeSigMarkersE"]
            pub static mut CountTempoTimeSigMarkers: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19CountTrackEnvelopesE"]
            pub static mut CountTrackEnvelopes: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CountTrackMediaItemsE"]
            pub static mut CountTrackMediaItems: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11CountTracksE"]
            pub static mut CountTracks: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21CreateLocalOscHandlerE"]
            pub static mut CreateLocalOscHandler: ::std::option::Option<
                unsafe extern "C" fn(
                    obj: *mut ::std::os::raw::c_void,
                    callback: *mut ::std::os::raw::c_void,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15CreateMIDIInputE"]
            pub static mut CreateMIDIInput: ::std::option::Option<
                unsafe extern "C" fn(dev: ::std::os::raw::c_int) -> *mut root::midi_Input,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16CreateMIDIOutputE"]
            pub static mut CreateMIDIOutput: ::std::option::Option<
                unsafe extern "C" fn(
                    dev: ::std::os::raw::c_int,
                    streamMode: bool,
                    msoffset100: *mut ::std::os::raw::c_int,
                ) -> *mut root::midi_Output,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23CreateNewMIDIItemInProjE"]
            pub static mut CreateNewMIDIItemInProj: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    starttime: f64,
                    endtime: f64,
                    qnInOptional: *const bool,
                ) -> *mut root::MediaItem,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23CreateTakeAudioAccessorE"]
            pub static mut CreateTakeAudioAccessor: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                ) -> *mut root::reaper_functions::AudioAccessor,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24CreateTrackAudioAccessorE"]
            pub static mut CreateTrackAudioAccessor: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                ) -> *mut root::reaper_functions::AudioAccessor,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15CreateTrackSendE"]
            pub static mut CreateTrackSend: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    desttrInOptional: *mut root::MediaTrack,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15CSurf_FlushUndoE"]
            pub static mut CSurf_FlushUndo:
                ::std::option::Option<unsafe extern "C" fn(force: bool)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19CSurf_GetTouchStateE"]
            pub static mut CSurf_GetTouchState: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    isPan: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11CSurf_GoEndE"]
            pub static mut CSurf_GoEnd: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13CSurf_GoStartE"]
            pub static mut CSurf_GoStart: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15CSurf_NumTracksE"]
            pub static mut CSurf_NumTracks:
                ::std::option::Option<unsafe extern "C" fn(mcpView: bool) -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13CSurf_OnArrowE"]
            pub static mut CSurf_OnArrow: ::std::option::Option<
                unsafe extern "C" fn(whichdir: ::std::os::raw::c_int, wantzoom: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11CSurf_OnFwdE"]
            pub static mut CSurf_OnFwd:
                ::std::option::Option<unsafe extern "C" fn(seekplay: ::std::os::raw::c_int)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16CSurf_OnFXChangeE"]
            pub static mut CSurf_OnFXChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    en: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26CSurf_OnInputMonitorChangeE"]
            pub static mut CSurf_OnInputMonitorChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    monitor: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions28CSurf_OnInputMonitorChangeExE"]
            pub static mut CSurf_OnInputMonitorChangeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    monitor: ::std::os::raw::c_int,
                    allowgang: bool,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18CSurf_OnMuteChangeE"]
            pub static mut CSurf_OnMuteChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    mute: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CSurf_OnMuteChangeExE"]
            pub static mut CSurf_OnMuteChangeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    mute: ::std::os::raw::c_int,
                    allowgang: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25CSurf_OnOscControlMessageE"]
            pub static mut CSurf_OnOscControlMessage: ::std::option::Option<
                unsafe extern "C" fn(msg: *const ::std::os::raw::c_char, arg: *const f32),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17CSurf_OnPanChangeE"]
            pub static mut CSurf_OnPanChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    pan: f64,
                    relative: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19CSurf_OnPanChangeExE"]
            pub static mut CSurf_OnPanChangeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    pan: f64,
                    relative: bool,
                    allowGang: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13CSurf_OnPauseE"]
            pub static mut CSurf_OnPause: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12CSurf_OnPlayE"]
            pub static mut CSurf_OnPlay: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22CSurf_OnPlayRateChangeE"]
            pub static mut CSurf_OnPlayRateChange:
                ::std::option::Option<unsafe extern "C" fn(playrate: f64)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CSurf_OnRecArmChangeE"]
            pub static mut CSurf_OnRecArmChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    recarm: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22CSurf_OnRecArmChangeExE"]
            pub static mut CSurf_OnRecArmChangeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    recarm: ::std::os::raw::c_int,
                    allowgang: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14CSurf_OnRecordE"]
            pub static mut CSurf_OnRecord: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21CSurf_OnRecvPanChangeE"]
            pub static mut CSurf_OnRecvPanChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    recv_index: ::std::os::raw::c_int,
                    pan: f64,
                    relative: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24CSurf_OnRecvVolumeChangeE"]
            pub static mut CSurf_OnRecvVolumeChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    recv_index: ::std::os::raw::c_int,
                    volume: f64,
                    relative: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11CSurf_OnRewE"]
            pub static mut CSurf_OnRew:
                ::std::option::Option<unsafe extern "C" fn(seekplay: ::std::os::raw::c_int)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14CSurf_OnRewFwdE"]
            pub static mut CSurf_OnRewFwd: ::std::option::Option<
                unsafe extern "C" fn(seekplay: ::std::os::raw::c_int, dir: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14CSurf_OnScrollE"]
            pub static mut CSurf_OnScroll: ::std::option::Option<
                unsafe extern "C" fn(xdir: ::std::os::raw::c_int, ydir: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22CSurf_OnSelectedChangeE"]
            pub static mut CSurf_OnSelectedChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    selected: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21CSurf_OnSendPanChangeE"]
            pub static mut CSurf_OnSendPanChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    send_index: ::std::os::raw::c_int,
                    pan: f64,
                    relative: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24CSurf_OnSendVolumeChangeE"]
            pub static mut CSurf_OnSendVolumeChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    send_index: ::std::os::raw::c_int,
                    volume: f64,
                    relative: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18CSurf_OnSoloChangeE"]
            pub static mut CSurf_OnSoloChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    solo: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CSurf_OnSoloChangeExE"]
            pub static mut CSurf_OnSoloChangeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    solo: ::std::os::raw::c_int,
                    allowgang: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12CSurf_OnStopE"]
            pub static mut CSurf_OnStop: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19CSurf_OnTempoChangeE"]
            pub static mut CSurf_OnTempoChange:
                ::std::option::Option<unsafe extern "C" fn(bpm: f64)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22CSurf_OnTrackSelectionE"]
            pub static mut CSurf_OnTrackSelection:
                ::std::option::Option<unsafe extern "C" fn(trackid: *mut root::MediaTrack)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CSurf_OnVolumeChangeE"]
            pub static mut CSurf_OnVolumeChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    volume: f64,
                    relative: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22CSurf_OnVolumeChangeExE"]
            pub static mut CSurf_OnVolumeChangeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    volume: f64,
                    relative: bool,
                    allowGang: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19CSurf_OnWidthChangeE"]
            pub static mut CSurf_OnWidthChange: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    width: f64,
                    relative: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21CSurf_OnWidthChangeExE"]
            pub static mut CSurf_OnWidthChangeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    width: f64,
                    relative: bool,
                    allowGang: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12CSurf_OnZoomE"]
            pub static mut CSurf_OnZoom: ::std::option::Option<
                unsafe extern "C" fn(xdir: ::std::os::raw::c_int, ydir: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions32CSurf_ResetAllCachedVolPanStatesE"]
            pub static mut CSurf_ResetAllCachedVolPanStates:
                ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14CSurf_ScrubAmtE"]
            pub static mut CSurf_ScrubAmt: ::std::option::Option<unsafe extern "C" fn(amt: f64)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17CSurf_SetAutoModeE"]
            pub static mut CSurf_SetAutoMode: ::std::option::Option<
                unsafe extern "C" fn(
                    mode: ::std::os::raw::c_int,
                    ignoresurf: *mut root::IReaperControlSurface,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18CSurf_SetPlayStateE"]
            pub static mut CSurf_SetPlayState: ::std::option::Option<
                unsafe extern "C" fn(
                    play: bool,
                    pause: bool,
                    rec: bool,
                    ignoresurf: *mut root::IReaperControlSurface,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CSurf_SetRepeatStateE"]
            pub static mut CSurf_SetRepeatState: ::std::option::Option<
                unsafe extern "C" fn(rep: bool, ignoresurf: *mut root::IReaperControlSurface),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CSurf_SetSurfaceMuteE"]
            pub static mut CSurf_SetSurfaceMute: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    mute: bool,
                    ignoresurf: *mut root::IReaperControlSurface,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19CSurf_SetSurfacePanE"]
            pub static mut CSurf_SetSurfacePan: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    pan: f64,
                    ignoresurf: *mut root::IReaperControlSurface,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22CSurf_SetSurfaceRecArmE"]
            pub static mut CSurf_SetSurfaceRecArm: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    recarm: bool,
                    ignoresurf: *mut root::IReaperControlSurface,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24CSurf_SetSurfaceSelectedE"]
            pub static mut CSurf_SetSurfaceSelected: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    selected: bool,
                    ignoresurf: *mut root::IReaperControlSurface,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20CSurf_SetSurfaceSoloE"]
            pub static mut CSurf_SetSurfaceSolo: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    solo: bool,
                    ignoresurf: *mut root::IReaperControlSurface,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22CSurf_SetSurfaceVolumeE"]
            pub static mut CSurf_SetSurfaceVolume: ::std::option::Option<
                unsafe extern "C" fn(
                    trackid: *mut root::MediaTrack,
                    volume: f64,
                    ignoresurf: *mut root::IReaperControlSurface,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24CSurf_SetTrackListChangeE"]
            pub static mut CSurf_SetTrackListChange: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17CSurf_TrackFromIDE"]
            pub static mut CSurf_TrackFromID: ::std::option::Option<
                unsafe extern "C" fn(
                    idx: ::std::os::raw::c_int,
                    mcpView: bool,
                ) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15CSurf_TrackToIDE"]
            pub static mut CSurf_TrackToID: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    mcpView: bool,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions9DB2SLIDERE"]
            pub static mut DB2SLIDER: ::std::option::Option<unsafe extern "C" fn(x: f64) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20DeleteActionShortcutE"]
            pub static mut DeleteActionShortcut: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *mut root::KbdSectionInfo,
                    cmdID: ::std::os::raw::c_int,
                    shortcutidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21DeleteEnvelopePointExE"]
            pub static mut DeleteEnvelopePointEx: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                    ptidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24DeleteEnvelopePointRangeE"]
            pub static mut DeleteEnvelopePointRange: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    time_start: f64,
                    time_end: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26DeleteEnvelopePointRangeExE"]
            pub static mut DeleteEnvelopePointRangeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                    time_start: f64,
                    time_end: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14DeleteExtStateE"]
            pub static mut DeleteExtState: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *const ::std::os::raw::c_char,
                    key: *const ::std::os::raw::c_char,
                    persist: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19DeleteProjectMarkerE"]
            pub static mut DeleteProjectMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    markrgnindexnumber: ::std::os::raw::c_int,
                    isrgn: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26DeleteProjectMarkerByIndexE"]
            pub static mut DeleteProjectMarkerByIndex: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    markrgnidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24DeleteTakeStretchMarkersE"]
            pub static mut DeleteTakeStretchMarkers: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    idx: ::std::os::raw::c_int,
                    countInOptional: *const ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24DeleteTempoTimeSigMarkerE"]
            pub static mut DeleteTempoTimeSigMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    markerindex: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11DeleteTrackE"]
            pub static mut DeleteTrack:
                ::std::option::Option<unsafe extern "C" fn(tr: *mut root::MediaTrack)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20DeleteTrackMediaItemE"]
            pub static mut DeleteTrackMediaItem: ::std::option::Option<
                unsafe extern "C" fn(tr: *mut root::MediaTrack, it: *mut root::MediaItem) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20DestroyAudioAccessorE"]
            pub static mut DestroyAudioAccessor: ::std::option::Option<
                unsafe extern "C" fn(accessor: *mut root::reaper_functions::AudioAccessor),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22DestroyLocalOscHandlerE"]
            pub static mut DestroyLocalOscHandler: ::std::option::Option<
                unsafe extern "C" fn(local_osc_handler: *mut ::std::os::raw::c_void),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22DoActionShortcutDialogE"]
            pub static mut DoActionShortcutDialog: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    section: *mut root::KbdSectionInfo,
                    cmdID: ::std::os::raw::c_int,
                    shortcutidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17Dock_UpdateDockIDE"]
            pub static mut Dock_UpdateDockID: ::std::option::Option<
                unsafe extern "C" fn(
                    ident_str: *const ::std::os::raw::c_char,
                    whichDock: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15DockGetPositionE"]
            pub static mut DockGetPosition: ::std::option::Option<
                unsafe extern "C" fn(whichDock: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17DockIsChildOfDockE"]
            pub static mut DockIsChildOfDock: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    isFloatingDockerOut: *mut bool,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18DockWindowActivateE"]
            pub static mut DockWindowActivate:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13DockWindowAddE"]
            pub static mut DockWindowAdd: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    name: *const ::std::os::raw::c_char,
                    pos: ::std::os::raw::c_int,
                    allowShow: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15DockWindowAddExE"]
            pub static mut DockWindowAddEx: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    name: *const ::std::os::raw::c_char,
                    identstr: *const ::std::os::raw::c_char,
                    allowShow: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17DockWindowRefreshE"]
            pub static mut DockWindowRefresh: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24DockWindowRefreshForHWNDE"]
            pub static mut DockWindowRefreshForHWND:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16DockWindowRemoveE"]
            pub static mut DockWindowRemove:
                ::std::option::Option<unsafe extern "C" fn(hwnd: root::HWND)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25DuplicateCustomizableMenuE"]
            pub static mut DuplicateCustomizableMenu: ::std::option::Option<
                unsafe extern "C" fn(
                    srcmenu: *mut ::std::os::raw::c_void,
                    destmenu: *mut ::std::os::raw::c_void,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22EditTempoTimeSigMarkerE"]
            pub static mut EditTempoTimeSigMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    markerindex: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions28EnsureNotCompletelyOffscreenE"]
            pub static mut EnsureNotCompletelyOffscreen:
                ::std::option::Option<unsafe extern "C" fn(rInOut: *mut root::RECT)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14EnumerateFilesE"]
            pub static mut EnumerateFiles: ::std::option::Option<
                unsafe extern "C" fn(
                    path: *const ::std::os::raw::c_char,
                    fileindex: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23EnumerateSubdirectoriesE"]
            pub static mut EnumerateSubdirectories: ::std::option::Option<
                unsafe extern "C" fn(
                    path: *const ::std::os::raw::c_char,
                    subdirindex: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19EnumPitchShiftModesE"]
            pub static mut EnumPitchShiftModes: ::std::option::Option<
                unsafe extern "C" fn(
                    mode: ::std::os::raw::c_int,
                    strOut: *mut *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22EnumPitchShiftSubModesE"]
            pub static mut EnumPitchShiftSubModes: ::std::option::Option<
                unsafe extern "C" fn(
                    mode: ::std::os::raw::c_int,
                    submode: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18EnumProjectMarkersE"]
            pub static mut EnumProjectMarkers: ::std::option::Option<
                unsafe extern "C" fn(
                    idx: ::std::os::raw::c_int,
                    isrgnOut: *mut bool,
                    posOut: *mut f64,
                    rgnendOut: *mut f64,
                    nameOut: *mut *const ::std::os::raw::c_char,
                    markrgnindexnumberOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19EnumProjectMarkers2E"]
            pub static mut EnumProjectMarkers2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    idx: ::std::os::raw::c_int,
                    isrgnOut: *mut bool,
                    posOut: *mut f64,
                    rgnendOut: *mut f64,
                    nameOut: *mut *const ::std::os::raw::c_char,
                    markrgnindexnumberOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19EnumProjectMarkers3E"]
            pub static mut EnumProjectMarkers3: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    idx: ::std::os::raw::c_int,
                    isrgnOut: *mut bool,
                    posOut: *mut f64,
                    rgnendOut: *mut f64,
                    nameOut: *mut *const ::std::os::raw::c_char,
                    markrgnindexnumberOut: *mut ::std::os::raw::c_int,
                    colorOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12EnumProjectsE"]
            pub static mut EnumProjects: ::std::option::Option<
                unsafe extern "C" fn(
                    idx: ::std::os::raw::c_int,
                    projfnOutOptional: *mut ::std::os::raw::c_char,
                    projfnOutOptional_sz: ::std::os::raw::c_int,
                ) -> *mut root::ReaProject,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16EnumProjExtStateE"]
            pub static mut EnumProjExtState: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    extname: *const ::std::os::raw::c_char,
                    idx: ::std::os::raw::c_int,
                    keyOutOptional: *mut ::std::os::raw::c_char,
                    keyOutOptional_sz: ::std::os::raw::c_int,
                    valOutOptional: *mut ::std::os::raw::c_char,
                    valOutOptional_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22EnumRegionRenderMatrixE"]
            pub static mut EnumRegionRenderMatrix: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    regionindex: ::std::os::raw::c_int,
                    rendertrack: ::std::os::raw::c_int,
                ) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25EnumTrackMIDIProgramNamesE"]
            pub static mut EnumTrackMIDIProgramNames: ::std::option::Option<
                unsafe extern "C" fn(
                    track: ::std::os::raw::c_int,
                    programNumber: ::std::os::raw::c_int,
                    programName: *mut ::std::os::raw::c_char,
                    programName_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27EnumTrackMIDIProgramNamesExE"]
            pub static mut EnumTrackMIDIProgramNamesEx: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    track: *mut root::MediaTrack,
                    programNumber: ::std::os::raw::c_int,
                    programName: *mut ::std::os::raw::c_char,
                    programName_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17Envelope_EvaluateE"]
            pub static mut Envelope_Evaluate: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    time: f64,
                    samplerate: f64,
                    samplesRequested: ::std::os::raw::c_int,
                    valueOutOptional: *mut f64,
                    dVdSOutOptional: *mut f64,
                    ddVdSOutOptional: *mut f64,
                    dddVdSOutOptional: *mut f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20Envelope_FormatValueE"]
            pub static mut Envelope_FormatValue: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    value: f64,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22Envelope_GetParentTakeE"]
            pub static mut Envelope_GetParentTake: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    indexOutOptional: *mut ::std::os::raw::c_int,
                    index2OutOptional: *mut ::std::os::raw::c_int,
                ) -> *mut root::MediaItem_Take,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23Envelope_GetParentTrackE"]
            pub static mut Envelope_GetParentTrack: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    indexOutOptional: *mut ::std::os::raw::c_int,
                    index2OutOptional: *mut ::std::os::raw::c_int,
                ) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19Envelope_SortPointsE"]
            pub static mut Envelope_SortPoints: ::std::option::Option<
                unsafe extern "C" fn(envelope: *mut root::TrackEnvelope) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21Envelope_SortPointsExE"]
            pub static mut Envelope_SortPointsEx: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11ExecProcessE"]
            pub static mut ExecProcess: ::std::option::Option<
                unsafe extern "C" fn(
                    cmdline: *const ::std::os::raw::c_char,
                    timeoutmsec: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11file_existsE"]
            pub static mut file_exists: ::std::option::Option<
                unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22FindTempoTimeSigMarkerE"]
            pub static mut FindTempoTimeSigMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    time: f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14format_timestrE"]
            pub static mut format_timestr: ::std::option::Option<
                unsafe extern "C" fn(
                    tpos: f64,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18format_timestr_lenE"]
            pub static mut format_timestr_len: ::std::option::Option<
                unsafe extern "C" fn(
                    tpos: f64,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                    offset: f64,
                    modeoverride: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18format_timestr_posE"]
            pub static mut format_timestr_pos: ::std::option::Option<
                unsafe extern "C" fn(
                    tpos: f64,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                    modeoverride: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11FreeHeapPtrE"]
            pub static mut FreeHeapPtr:
                ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions7genGuidE"]
            pub static mut genGuid: ::std::option::Option<unsafe extern "C" fn(g: *mut root::GUID)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14get_config_varE"]
            pub static mut get_config_var: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                    szOut: *mut ::std::os::raw::c_int,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21get_config_var_stringE"]
            pub static mut get_config_var_string: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12get_ini_fileE"]
            pub static mut get_ini_file:
                ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19get_midi_config_varE"]
            pub static mut get_midi_config_var: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                    szOut: *mut ::std::os::raw::c_int,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetActionShortcutDescE"]
            pub static mut GetActionShortcutDesc: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *mut root::KbdSectionInfo,
                    cmdID: ::std::os::raw::c_int,
                    shortcutidx: ::std::os::raw::c_int,
                    desc: *mut ::std::os::raw::c_char,
                    desclen: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetActiveTakeE"]
            pub static mut GetActiveTake: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem) -> *mut root::MediaItem_Take,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetAllProjectPlayStatesE"]
            pub static mut GetAllProjectPlayStates: ::std::option::Option<
                unsafe extern "C" fn(ignoreProject: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetAppVersionE"]
            pub static mut GetAppVersion:
                ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15GetArmedCommandE"]
            pub static mut GetArmedCommand: ::std::option::Option<
                unsafe extern "C" fn(
                    secOut: *mut ::std::os::raw::c_char,
                    secOut_sz: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetAudioAccessorEndTimeE"]
            pub static mut GetAudioAccessorEndTime: ::std::option::Option<
                unsafe extern "C" fn(accessor: *mut root::reaper_functions::AudioAccessor) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetAudioAccessorHashE"]
            pub static mut GetAudioAccessorHash: ::std::option::Option<
                unsafe extern "C" fn(
                    accessor: *mut root::reaper_functions::AudioAccessor,
                    hashNeed128: *mut ::std::os::raw::c_char,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetAudioAccessorSamplesE"]
            pub static mut GetAudioAccessorSamples: ::std::option::Option<
                unsafe extern "C" fn(
                    accessor: *mut root::reaper_functions::AudioAccessor,
                    samplerate: ::std::os::raw::c_int,
                    numchannels: ::std::os::raw::c_int,
                    starttime_sec: f64,
                    numsamplesperchannel: ::std::os::raw::c_int,
                    samplebuffer: *mut f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25GetAudioAccessorStartTimeE"]
            pub static mut GetAudioAccessorStartTime: ::std::option::Option<
                unsafe extern "C" fn(accessor: *mut root::reaper_functions::AudioAccessor) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetAudioDeviceInfoE"]
            pub static mut GetAudioDeviceInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    attribute: *const ::std::os::raw::c_char,
                    desc: *mut ::std::os::raw::c_char,
                    desc_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetColorThemeE"]
            pub static mut GetColorTheme: ::std::option::Option<
                unsafe extern "C" fn(
                    idx: ::std::os::raw::c_int,
                    defval: ::std::os::raw::c_int,
                ) -> root::INT_PTR,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetColorThemeStructE"]
            pub static mut GetColorThemeStruct: ::std::option::Option<
                unsafe extern "C" fn(
                    szOut: *mut ::std::os::raw::c_int,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetConfigWantsDockE"]
            pub static mut GetConfigWantsDock: ::std::option::Option<
                unsafe extern "C" fn(
                    ident_str: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetContextMenuE"]
            pub static mut GetContextMenu: ::std::option::Option<
                unsafe extern "C" fn(idx: ::std::os::raw::c_int) -> root::HMENU,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27GetCurrentProjectInLoadSaveE"]
            pub static mut GetCurrentProjectInLoadSave:
                ::std::option::Option<unsafe extern "C" fn() -> *mut root::ReaProject>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetCursorContextE"]
            pub static mut GetCursorContext:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetCursorContext2E"]
            pub static mut GetCursorContext2: ::std::option::Option<
                unsafe extern "C" fn(want_last_valid: bool) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetCursorPositionE"]
            pub static mut GetCursorPosition: ::std::option::Option<unsafe extern "C" fn() -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetCursorPositionExE"]
            pub static mut GetCursorPositionEx:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26GetDisplayedMediaItemColorE"]
            pub static mut GetDisplayedMediaItemColor: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27GetDisplayedMediaItemColor2E"]
            pub static mut GetDisplayedMediaItemColor2: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    take: *mut root::MediaItem_Take,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetEnvelopeInfo_ValueE"]
            pub static mut GetEnvelopeInfo_Value: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::TrackEnvelope,
                    parmname: *const ::std::os::raw::c_char,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15GetEnvelopeNameE"]
            pub static mut GetEnvelopeName: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetEnvelopePointE"]
            pub static mut GetEnvelopePoint: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    ptidx: ::std::os::raw::c_int,
                    timeOutOptional: *mut f64,
                    valueOutOptional: *mut f64,
                    shapeOutOptional: *mut ::std::os::raw::c_int,
                    tensionOutOptional: *mut f64,
                    selectedOutOptional: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetEnvelopePointByTimeE"]
            pub static mut GetEnvelopePointByTime: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    time: f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24GetEnvelopePointByTimeExE"]
            pub static mut GetEnvelopePointByTimeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                    time: f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetEnvelopePointExE"]
            pub static mut GetEnvelopePointEx: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                    ptidx: ::std::os::raw::c_int,
                    timeOutOptional: *mut f64,
                    valueOutOptional: *mut f64,
                    shapeOutOptional: *mut ::std::os::raw::c_int,
                    tensionOutOptional: *mut f64,
                    selectedOutOptional: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetEnvelopeScalingModeE"]
            pub static mut GetEnvelopeScalingMode: ::std::option::Option<
                unsafe extern "C" fn(env: *mut root::TrackEnvelope) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetEnvelopeStateChunkE"]
            pub static mut GetEnvelopeStateChunk: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    strNeedBig: *mut ::std::os::raw::c_char,
                    strNeedBig_sz: ::std::os::raw::c_int,
                    isundoOptional: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10GetExePathE"]
            pub static mut GetExePath:
                ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11GetExtStateE"]
            pub static mut GetExtState: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *const ::std::os::raw::c_char,
                    key: *const ::std::os::raw::c_char,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetFocusedFXE"]
            pub static mut GetFocusedFX: ::std::option::Option<
                unsafe extern "C" fn(
                    tracknumberOut: *mut ::std::os::raw::c_int,
                    itemnumberOut: *mut ::std::os::raw::c_int,
                    fxnumberOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions29GetFreeDiskSpaceForRecordPathE"]
            pub static mut GetFreeDiskSpaceForRecordPath: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    pathidx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetFXEnvelopeE"]
            pub static mut GetFXEnvelope: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fxindex: ::std::os::raw::c_int,
                    parameterindex: ::std::os::raw::c_int,
                    create: bool,
                ) -> *mut root::TrackEnvelope,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27GetGlobalAutomationOverrideE"]
            pub static mut GetGlobalAutomationOverride:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetHZoomLevelE"]
            pub static mut GetHZoomLevel: ::std::option::Option<unsafe extern "C" fn() -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetIconThemePointerE"]
            pub static mut GetIconThemePointer: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25GetIconThemePointerForDPIE"]
            pub static mut GetIconThemePointerForDPI: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                    dpisc: ::std::os::raw::c_int,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetIconThemeStructE"]
            pub static mut GetIconThemeStruct: ::std::option::Option<
                unsafe extern "C" fn(
                    szOut: *mut ::std::os::raw::c_int,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetInputChannelNameE"]
            pub static mut GetInputChannelName: ::std::option::Option<
                unsafe extern "C" fn(
                    channelIndex: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetInputOutputLatencyE"]
            pub static mut GetInputOutputLatency: ::std::option::Option<
                unsafe extern "C" fn(
                    inputlatencyOut: *mut ::std::os::raw::c_int,
                    outputLatencyOut: *mut ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetItemEditingTime2E"]
            pub static mut GetItemEditingTime2: ::std::option::Option<
                unsafe extern "C" fn(
                    which_itemOut: *mut *mut root::PCM_source,
                    flagsOut: *mut ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetItemFromPointE"]
            pub static mut GetItemFromPoint: ::std::option::Option<
                unsafe extern "C" fn(
                    screen_x: ::std::os::raw::c_int,
                    screen_y: ::std::os::raw::c_int,
                    allow_locked: bool,
                    takeOutOptional: *mut *mut root::MediaItem_Take,
                ) -> *mut root::MediaItem,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetItemProjectContextE"]
            pub static mut GetItemProjectContext: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem) -> *mut root::ReaProject,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetItemStateChunkE"]
            pub static mut GetItemStateChunk: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    strNeedBig: *mut ::std::os::raw::c_char,
                    strNeedBig_sz: ::std::os::raw::c_int,
                    isundoOptional: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetLastColorThemeFileE"]
            pub static mut GetLastColorThemeFile:
                ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25GetLastMarkerAndCurRegionE"]
            pub static mut GetLastMarkerAndCurRegion: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    time: f64,
                    markeridxOut: *mut ::std::os::raw::c_int,
                    regionidxOut: *mut ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetLastTouchedFXE"]
            pub static mut GetLastTouchedFX: ::std::option::Option<
                unsafe extern "C" fn(
                    tracknumberOut: *mut ::std::os::raw::c_int,
                    fxnumberOut: *mut ::std::os::raw::c_int,
                    paramnumberOut: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetLastTouchedTrackE"]
            pub static mut GetLastTouchedTrack:
                ::std::option::Option<unsafe extern "C" fn() -> *mut root::MediaTrack>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11GetMainHwndE"]
            pub static mut GetMainHwnd: ::std::option::Option<unsafe extern "C" fn() -> root::HWND>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetMasterMuteSoloFlagsE"]
            pub static mut GetMasterMuteSoloFlags:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetMasterTrackE"]
            pub static mut GetMasterTrack: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24GetMasterTrackVisibilityE"]
            pub static mut GetMasterTrackVisibility:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetMaxMidiInputsE"]
            pub static mut GetMaxMidiInputs:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetMaxMidiOutputsE"]
            pub static mut GetMaxMidiOutputs:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetMediaItemE"]
            pub static mut GetMediaItem: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    itemidx: ::std::os::raw::c_int,
                ) -> *mut root::MediaItem,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetMediaItem_TrackE"]
            pub static mut GetMediaItem_Track: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetMediaItemInfo_ValueE"]
            pub static mut GetMediaItemInfo_Value: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    parmname: *const ::std::os::raw::c_char,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetMediaItemNumTakesE"]
            pub static mut GetMediaItemNumTakes: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetMediaItemTakeE"]
            pub static mut GetMediaItemTake: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    tk: ::std::os::raw::c_int,
                ) -> *mut root::MediaItem_Take,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetMediaItemTake_ItemE"]
            pub static mut GetMediaItemTake_Item: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take) -> *mut root::MediaItem,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetMediaItemTake_PeaksE"]
            pub static mut GetMediaItemTake_Peaks: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    peakrate: f64,
                    starttime: f64,
                    numchannels: ::std::os::raw::c_int,
                    numsamplesperchannel: ::std::os::raw::c_int,
                    want_extra_type: ::std::os::raw::c_int,
                    buf: *mut f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetMediaItemTake_SourceE"]
            pub static mut GetMediaItemTake_Source: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take) -> *mut root::PCM_source,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetMediaItemTake_TrackE"]
            pub static mut GetMediaItemTake_Track: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetMediaItemTakeByGUIDE"]
            pub static mut GetMediaItemTakeByGUID: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    guid: *const root::GUID,
                ) -> *mut root::MediaItem_Take,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26GetMediaItemTakeInfo_ValueE"]
            pub static mut GetMediaItemTakeInfo_Value: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    parmname: *const ::std::os::raw::c_char,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetMediaItemTrackE"]
            pub static mut GetMediaItemTrack: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetMediaSourceFileNameE"]
            pub static mut GetMediaSourceFileName: ::std::option::Option<
                unsafe extern "C" fn(
                    source: *mut root::PCM_source,
                    filenamebuf: *mut ::std::os::raw::c_char,
                    filenamebuf_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetMediaSourceLengthE"]
            pub static mut GetMediaSourceLength: ::std::option::Option<
                unsafe extern "C" fn(
                    source: *mut root::PCM_source,
                    lengthIsQNOut: *mut bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25GetMediaSourceNumChannelsE"]
            pub static mut GetMediaSourceNumChannels: ::std::option::Option<
                unsafe extern "C" fn(source: *mut root::PCM_source) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetMediaSourceParentE"]
            pub static mut GetMediaSourceParent: ::std::option::Option<
                unsafe extern "C" fn(src: *mut root::PCM_source) -> *mut root::PCM_source,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24GetMediaSourceSampleRateE"]
            pub static mut GetMediaSourceSampleRate: ::std::option::Option<
                unsafe extern "C" fn(source: *mut root::PCM_source) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetMediaSourceTypeE"]
            pub static mut GetMediaSourceType: ::std::option::Option<
                unsafe extern "C" fn(
                    source: *mut root::PCM_source,
                    typebuf: *mut ::std::os::raw::c_char,
                    typebuf_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetMediaTrackInfo_ValueE"]
            pub static mut GetMediaTrackInfo_Value: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    parmname: *const ::std::os::raw::c_char,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetMIDIInputNameE"]
            pub static mut GetMIDIInputName: ::std::option::Option<
                unsafe extern "C" fn(
                    dev: ::std::os::raw::c_int,
                    nameout: *mut ::std::os::raw::c_char,
                    nameout_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetMIDIOutputNameE"]
            pub static mut GetMIDIOutputName: ::std::option::Option<
                unsafe extern "C" fn(
                    dev: ::std::os::raw::c_int,
                    nameout: *mut ::std::os::raw::c_char,
                    nameout_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetMixerScrollE"]
            pub static mut GetMixerScroll:
                ::std::option::Option<unsafe extern "C" fn() -> *mut root::MediaTrack>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetMouseModifierE"]
            pub static mut GetMouseModifier: ::std::option::Option<
                unsafe extern "C" fn(
                    context: *const ::std::os::raw::c_char,
                    modifier_flag: ::std::os::raw::c_int,
                    action: *mut ::std::os::raw::c_char,
                    action_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetMousePositionE"]
            pub static mut GetMousePosition: ::std::option::Option<
                unsafe extern "C" fn(
                    xOut: *mut ::std::os::raw::c_int,
                    yOut: *mut ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetNumAudioInputsE"]
            pub static mut GetNumAudioInputs:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetNumAudioOutputsE"]
            pub static mut GetNumAudioOutputs:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetNumMIDIInputsE"]
            pub static mut GetNumMIDIInputs:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetNumMIDIOutputsE"]
            pub static mut GetNumMIDIOutputs:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetNumTracksE"]
            pub static mut GetNumTracks:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions5GetOSE"]
            pub static mut GetOS:
                ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetOutputChannelNameE"]
            pub static mut GetOutputChannelName: ::std::option::Option<
                unsafe extern "C" fn(
                    channelIndex: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetOutputLatencyE"]
            pub static mut GetOutputLatency: ::std::option::Option<unsafe extern "C" fn() -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetParentTrackE"]
            pub static mut GetParentTrack: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15GetPeakFileNameE"]
            pub static mut GetPeakFileName: ::std::option::Option<
                unsafe extern "C" fn(
                    fn_: *const ::std::os::raw::c_char,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetPeakFileNameExE"]
            pub static mut GetPeakFileNameEx: ::std::option::Option<
                unsafe extern "C" fn(
                    fn_: *const ::std::os::raw::c_char,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                    forWrite: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetPeakFileNameEx2E"]
            pub static mut GetPeakFileNameEx2: ::std::option::Option<
                unsafe extern "C" fn(
                    fn_: *const ::std::os::raw::c_char,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                    forWrite: bool,
                    peaksfileextension: *const ::std::os::raw::c_char,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetPeaksBitmapE"]
            pub static mut GetPeaksBitmap: ::std::option::Option<
                unsafe extern "C" fn(
                    pks: *mut root::PCM_source_peaktransfer_t,
                    maxamp: f64,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    bmp: *mut root::reaper_functions::LICE_IBitmap,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15GetPlayPositionE"]
            pub static mut GetPlayPosition: ::std::option::Option<unsafe extern "C" fn() -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetPlayPosition2E"]
            pub static mut GetPlayPosition2: ::std::option::Option<unsafe extern "C" fn() -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetPlayPosition2ExE"]
            pub static mut GetPlayPosition2Ex:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetPlayPositionExE"]
            pub static mut GetPlayPositionEx:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetPlayStateE"]
            pub static mut GetPlayState:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetPlayStateExE"]
            pub static mut GetPlayStateEx: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24GetPreferredDiskReadModeE"]
            pub static mut GetPreferredDiskReadMode: ::std::option::Option<
                unsafe extern "C" fn(
                    mode: *mut ::std::os::raw::c_int,
                    nb: *mut ::std::os::raw::c_int,
                    bs: *mut ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions28GetPreferredDiskReadModePeakE"]
            pub static mut GetPreferredDiskReadModePeak: ::std::option::Option<
                unsafe extern "C" fn(
                    mode: *mut ::std::os::raw::c_int,
                    nb: *mut ::std::os::raw::c_int,
                    bs: *mut ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25GetPreferredDiskWriteModeE"]
            pub static mut GetPreferredDiskWriteMode: ::std::option::Option<
                unsafe extern "C" fn(
                    mode: *mut ::std::os::raw::c_int,
                    nb: *mut ::std::os::raw::c_int,
                    bs: *mut ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetProjectLengthE"]
            pub static mut GetProjectLength:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetProjectNameE"]
            pub static mut GetProjectName: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetProjectPathE"]
            pub static mut GetProjectPath: ::std::option::Option<
                unsafe extern "C" fn(
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetProjectPathExE"]
            pub static mut GetProjectPathEx: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26GetProjectStateChangeCountE"]
            pub static mut GetProjectStateChangeCount: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetProjectTimeOffsetE"]
            pub static mut GetProjectTimeOffset: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject, rndframe: bool) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetProjectTimeSignatureE"]
            pub static mut GetProjectTimeSignature:
                ::std::option::Option<unsafe extern "C" fn(bpmOut: *mut f64, bpiOut: *mut f64)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24GetProjectTimeSignature2E"]
            pub static mut GetProjectTimeSignature2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    bpmOut: *mut f64,
                    bpiOut: *mut f64,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15GetProjExtStateE"]
            pub static mut GetProjExtState: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    extname: *const ::std::os::raw::c_char,
                    key: *const ::std::os::raw::c_char,
                    valOutNeedBig: *mut ::std::os::raw::c_char,
                    valOutNeedBig_sz: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15GetResourcePathE"]
            pub static mut GetResourcePath:
                ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetSelectedEnvelopeE"]
            pub static mut GetSelectedEnvelope: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> *mut root::TrackEnvelope,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetSelectedMediaItemE"]
            pub static mut GetSelectedMediaItem: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    selitem: ::std::os::raw::c_int,
                ) -> *mut root::MediaItem,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetSelectedTrackE"]
            pub static mut GetSelectedTrack: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    seltrackidx: ::std::os::raw::c_int,
                ) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetSelectedTrack2E"]
            pub static mut GetSelectedTrack2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    seltrackidx: ::std::os::raw::c_int,
                    wantmaster: bool,
                ) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24GetSelectedTrackEnvelopeE"]
            pub static mut GetSelectedTrackEnvelope: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> *mut root::TrackEnvelope,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetSet_ArrangeView2E"]
            pub static mut GetSet_ArrangeView2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    isSet: bool,
                    screen_x_start: ::std::os::raw::c_int,
                    screen_x_end: ::std::os::raw::c_int,
                    start_timeOut: *mut f64,
                    end_timeOut: *mut f64,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetSet_LoopTimeRangeE"]
            pub static mut GetSet_LoopTimeRange: ::std::option::Option<
                unsafe extern "C" fn(
                    isSet: bool,
                    isLoop: bool,
                    startOut: *mut f64,
                    endOut: *mut f64,
                    allowautoseek: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetSet_LoopTimeRange2E"]
            pub static mut GetSet_LoopTimeRange2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    isSet: bool,
                    isLoop: bool,
                    startOut: *mut f64,
                    endOut: *mut f64,
                    allowautoseek: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24GetSetAutomationItemInfoE"]
            pub static mut GetSetAutomationItemInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                    desc: *const ::std::os::raw::c_char,
                    value: f64,
                    is_set: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions31GetSetAutomationItemInfo_StringE"]
            pub static mut GetSetAutomationItemInfo_String: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                    desc: *const ::std::os::raw::c_char,
                    valuestrNeedBig: *mut ::std::os::raw::c_char,
                    is_set: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25GetSetEnvelopeInfo_StringE"]
            pub static mut GetSetEnvelopeInfo_String: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    parmname: *const ::std::os::raw::c_char,
                    stringNeedBig: *mut ::std::os::raw::c_char,
                    setNewValue: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetSetEnvelopeStateE"]
            pub static mut GetSetEnvelopeState: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    str: *mut ::std::os::raw::c_char,
                    str_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetSetEnvelopeState2E"]
            pub static mut GetSetEnvelopeState2: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    str: *mut ::std::os::raw::c_char,
                    str_sz: ::std::os::raw::c_int,
                    isundo: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15GetSetItemStateE"]
            pub static mut GetSetItemState: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    str: *mut ::std::os::raw::c_char,
                    str_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetSetItemState2E"]
            pub static mut GetSetItemState2: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    str: *mut ::std::os::raw::c_char,
                    str_sz: ::std::os::raw::c_int,
                    isundo: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetSetMediaItemInfoE"]
            pub static mut GetSetMediaItemInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    parmname: *const ::std::os::raw::c_char,
                    setNewValue: *mut ::std::os::raw::c_void,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26GetSetMediaItemInfo_StringE"]
            pub static mut GetSetMediaItemInfo_String: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    parmname: *const ::std::os::raw::c_char,
                    stringNeedBig: *mut ::std::os::raw::c_char,
                    setNewValue: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetSetMediaItemTakeInfoE"]
            pub static mut GetSetMediaItemTakeInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    tk: *mut root::MediaItem_Take,
                    parmname: *const ::std::os::raw::c_char,
                    setNewValue: *mut ::std::os::raw::c_void,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions30GetSetMediaItemTakeInfo_StringE"]
            pub static mut GetSetMediaItemTakeInfo_String: ::std::option::Option<
                unsafe extern "C" fn(
                    tk: *mut root::MediaItem_Take,
                    parmname: *const ::std::os::raw::c_char,
                    stringNeedBig: *mut ::std::os::raw::c_char,
                    setNewValue: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetSetMediaTrackInfoE"]
            pub static mut GetSetMediaTrackInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    parmname: *const ::std::os::raw::c_char,
                    setNewValue: *mut ::std::os::raw::c_void,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27GetSetMediaTrackInfo_StringE"]
            pub static mut GetSetMediaTrackInfo_String: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    parmname: *const ::std::os::raw::c_char,
                    stringNeedBig: *mut ::std::os::raw::c_char,
                    setNewValue: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetSetObjectStateE"]
            pub static mut GetSetObjectState: ::std::option::Option<
                unsafe extern "C" fn(
                    obj: *mut ::std::os::raw::c_void,
                    str: *const ::std::os::raw::c_char,
                ) -> *mut ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetSetObjectState2E"]
            pub static mut GetSetObjectState2: ::std::option::Option<
                unsafe extern "C" fn(
                    obj: *mut ::std::os::raw::c_void,
                    str: *const ::std::os::raw::c_char,
                    isundo: bool,
                ) -> *mut ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetSetProjectAuthorE"]
            pub static mut GetSetProjectAuthor: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    set: bool,
                    author: *mut ::std::os::raw::c_char,
                    author_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetSetProjectGridE"]
            pub static mut GetSetProjectGrid: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    set: bool,
                    divisionInOutOptional: *mut f64,
                    swingmodeInOutOptional: *mut ::std::os::raw::c_int,
                    swingamtInOutOptional: *mut f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetSetProjectInfoE"]
            pub static mut GetSetProjectInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    desc: *const ::std::os::raw::c_char,
                    value: f64,
                    is_set: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24GetSetProjectInfo_StringE"]
            pub static mut GetSetProjectInfo_String: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    desc: *const ::std::os::raw::c_char,
                    valuestrNeedBig: *mut ::std::os::raw::c_char,
                    is_set: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetSetProjectNotesE"]
            pub static mut GetSetProjectNotes: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    set: bool,
                    notesNeedBig: *mut ::std::os::raw::c_char,
                    notesNeedBig_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetSetRepeatE"]
            pub static mut GetSetRepeat: ::std::option::Option<
                unsafe extern "C" fn(val: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetSetRepeatExE"]
            pub static mut GetSetRepeatEx: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    val: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26GetSetTrackGroupMembershipE"]
            pub static mut GetSetTrackGroupMembership: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    groupname: *const ::std::os::raw::c_char,
                    setmask: ::std::os::raw::c_uint,
                    setvalue: ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_uint,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions30GetSetTrackGroupMembershipHighE"]
            pub static mut GetSetTrackGroupMembershipHigh: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    groupname: *const ::std::os::raw::c_char,
                    setmask: ::std::os::raw::c_uint,
                    setvalue: ::std::os::raw::c_uint,
                ) -> ::std::os::raw::c_uint,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26GetSetTrackMIDISupportFileE"]
            pub static mut GetSetTrackMIDISupportFile: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    track: *mut root::MediaTrack,
                    which: ::std::os::raw::c_int,
                    filename: *const ::std::os::raw::c_char,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetSetTrackSendInfoE"]
            pub static mut GetSetTrackSendInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    category: ::std::os::raw::c_int,
                    sendidx: ::std::os::raw::c_int,
                    parmname: *const ::std::os::raw::c_char,
                    setNewValue: *mut ::std::os::raw::c_void,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26GetSetTrackSendInfo_StringE"]
            pub static mut GetSetTrackSendInfo_String: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    category: ::std::os::raw::c_int,
                    sendidx: ::std::os::raw::c_int,
                    parmname: *const ::std::os::raw::c_char,
                    stringNeedBig: *mut ::std::os::raw::c_char,
                    setNewValue: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetSetTrackStateE"]
            pub static mut GetSetTrackState: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    str: *mut ::std::os::raw::c_char,
                    str_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetSetTrackState2E"]
            pub static mut GetSetTrackState2: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    str: *mut ::std::os::raw::c_char,
                    str_sz: ::std::os::raw::c_int,
                    isundo: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetSubProjectFromSourceE"]
            pub static mut GetSubProjectFromSource: ::std::option::Option<
                unsafe extern "C" fn(src: *mut root::PCM_source) -> *mut root::ReaProject,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions7GetTakeE"]
            pub static mut GetTake: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    takeidx: ::std::os::raw::c_int,
                ) -> *mut root::MediaItem_Take,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15GetTakeEnvelopeE"]
            pub static mut GetTakeEnvelope: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    envidx: ::std::os::raw::c_int,
                ) -> *mut root::TrackEnvelope,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetTakeEnvelopeByNameE"]
            pub static mut GetTakeEnvelopeByName: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    envname: *const ::std::os::raw::c_char,
                ) -> *mut root::TrackEnvelope,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11GetTakeNameE"]
            pub static mut GetTakeName: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24GetTakeNumStretchMarkersE"]
            pub static mut GetTakeNumStretchMarkers: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetTakeStretchMarkerE"]
            pub static mut GetTakeStretchMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    idx: ::std::os::raw::c_int,
                    posOut: *mut f64,
                    srcposOutOptional: *mut f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25GetTakeStretchMarkerSlopeE"]
            pub static mut GetTakeStretchMarkerSlope: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    idx: ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetTCPFXParmE"]
            pub static mut GetTCPFXParm: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    track: *mut root::MediaTrack,
                    index: ::std::os::raw::c_int,
                    fxindexOut: *mut ::std::os::raw::c_int,
                    parmidxOut: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetTempoMatchPlayRateE"]
            pub static mut GetTempoMatchPlayRate: ::std::option::Option<
                unsafe extern "C" fn(
                    source: *mut root::PCM_source,
                    srcscale: f64,
                    position: f64,
                    mult: f64,
                    rateOut: *mut f64,
                    targetlenOut: *mut f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetTempoTimeSigMarkerE"]
            pub static mut GetTempoTimeSigMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    ptidx: ::std::os::raw::c_int,
                    timeposOut: *mut f64,
                    measureposOut: *mut ::std::os::raw::c_int,
                    beatposOut: *mut f64,
                    bpmOut: *mut f64,
                    timesig_numOut: *mut ::std::os::raw::c_int,
                    timesig_denomOut: *mut ::std::os::raw::c_int,
                    lineartempoOut: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetToggleCommandStateE"]
            pub static mut GetToggleCommandState: ::std::option::Option<
                unsafe extern "C" fn(command_id: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetToggleCommandState2E"]
            pub static mut GetToggleCommandState2: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *mut root::KbdSectionInfo,
                    command_id: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetToggleCommandStateExE"]
            pub static mut GetToggleCommandStateEx: ::std::option::Option<
                unsafe extern "C" fn(
                    section_id: ::std::os::raw::c_int,
                    command_id: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions33GetToggleCommandStateThroughHooksE"]
            pub static mut GetToggleCommandStateThroughHooks: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *mut root::KbdSectionInfo,
                    command_id: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetTooltipWindowE"]
            pub static mut GetTooltipWindow:
                ::std::option::Option<unsafe extern "C" fn() -> root::HWND>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions8GetTrackE"]
            pub static mut GetTrack: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    trackidx: ::std::os::raw::c_int,
                ) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetTrackAutomationModeE"]
            pub static mut GetTrackAutomationMode: ::std::option::Option<
                unsafe extern "C" fn(tr: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetTrackColorE"]
            pub static mut GetTrackColor: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetTrackDepthE"]
            pub static mut GetTrackDepth: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetTrackEnvelopeE"]
            pub static mut GetTrackEnvelope: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    envidx: ::std::os::raw::c_int,
                ) -> *mut root::TrackEnvelope,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27GetTrackEnvelopeByChunkNameE"]
            pub static mut GetTrackEnvelopeByChunkName: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    cfgchunkname: *const ::std::os::raw::c_char,
                ) -> *mut root::TrackEnvelope,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetTrackEnvelopeByNameE"]
            pub static mut GetTrackEnvelopeByName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    envname: *const ::std::os::raw::c_char,
                ) -> *mut root::TrackEnvelope,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetTrackFromPointE"]
            pub static mut GetTrackFromPoint: ::std::option::Option<
                unsafe extern "C" fn(
                    screen_x: ::std::os::raw::c_int,
                    screen_y: ::std::os::raw::c_int,
                    infoOutOptional: *mut ::std::os::raw::c_int,
                ) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetTrackGUIDE"]
            pub static mut GetTrackGUID: ::std::option::Option<
                unsafe extern "C" fn(tr: *mut root::MediaTrack) -> *mut root::GUID,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetTrackInfoE"]
            pub static mut GetTrackInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    track: root::INT_PTR,
                    flags: *mut ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17GetTrackMediaItemE"]
            pub static mut GetTrackMediaItem: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    itemidx: ::std::os::raw::c_int,
                ) -> *mut root::MediaItem,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetTrackMIDILyricsE"]
            pub static mut GetTrackMIDILyrics: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    flag: ::std::os::raw::c_int,
                    bufWantNeedBig: *mut ::std::os::raw::c_char,
                    bufWantNeedBig_sz: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetTrackMIDINoteNameE"]
            pub static mut GetTrackMIDINoteName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: ::std::os::raw::c_int,
                    pitch: ::std::os::raw::c_int,
                    chan: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetTrackMIDINoteNameExE"]
            pub static mut GetTrackMIDINoteNameEx: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    track: *mut root::MediaTrack,
                    pitch: ::std::os::raw::c_int,
                    chan: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetTrackMIDINoteRangeE"]
            pub static mut GetTrackMIDINoteRange: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    track: *mut root::MediaTrack,
                    note_loOut: *mut ::std::os::raw::c_int,
                    note_hiOut: *mut ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetTrackNameE"]
            pub static mut GetTrackName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetTrackNumMediaItemsE"]
            pub static mut GetTrackNumMediaItems: ::std::option::Option<
                unsafe extern "C" fn(tr: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetTrackNumSendsE"]
            pub static mut GetTrackNumSends: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    category: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19GetTrackReceiveNameE"]
            pub static mut GetTrackReceiveName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    recv_index: ::std::os::raw::c_int,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21GetTrackReceiveUIMuteE"]
            pub static mut GetTrackReceiveUIMute: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    recv_index: ::std::os::raw::c_int,
                    muteOut: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23GetTrackReceiveUIVolPanE"]
            pub static mut GetTrackReceiveUIVolPan: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    recv_index: ::std::os::raw::c_int,
                    volumeOut: *mut f64,
                    panOut: *mut f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetTrackSendInfo_ValueE"]
            pub static mut GetTrackSendInfo_Value: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    category: ::std::os::raw::c_int,
                    sendidx: ::std::os::raw::c_int,
                    parmname: *const ::std::os::raw::c_char,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetTrackSendNameE"]
            pub static mut GetTrackSendName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    send_index: ::std::os::raw::c_int,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetTrackSendUIMuteE"]
            pub static mut GetTrackSendUIMute: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    send_index: ::std::os::raw::c_int,
                    muteOut: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20GetTrackSendUIVolPanE"]
            pub static mut GetTrackSendUIVolPan: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    send_index: ::std::os::raw::c_int,
                    volumeOut: *mut f64,
                    panOut: *mut f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetTrackStateE"]
            pub static mut GetTrackState: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    flagsOut: *mut ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18GetTrackStateChunkE"]
            pub static mut GetTrackStateChunk: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    strNeedBig: *mut ::std::os::raw::c_char,
                    strNeedBig_sz: ::std::os::raw::c_int,
                    isundoOptional: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GetTrackUIMuteE"]
            pub static mut GetTrackUIMute: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack, muteOut: *mut bool) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetTrackUIPanE"]
            pub static mut GetTrackUIPan: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    pan1Out: *mut f64,
                    pan2Out: *mut f64,
                    panmodeOut: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16GetTrackUIVolPanE"]
            pub static mut GetTrackUIVolPan: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    volumeOut: *mut f64,
                    panOut: *mut f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15GetUnderrunTimeE"]
            pub static mut GetUnderrunTime: ::std::option::Option<
                unsafe extern "C" fn(
                    audio_xrunOutOptional: *mut ::std::os::raw::c_uint,
                    media_xrunOutOptional: *mut ::std::os::raw::c_uint,
                    curtimeOutOptional: *mut ::std::os::raw::c_uint,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22GetUserFileNameForReadE"]
            pub static mut GetUserFileNameForRead: ::std::option::Option<
                unsafe extern "C" fn(
                    filenameNeed4096: *mut ::std::os::raw::c_char,
                    title: *const ::std::os::raw::c_char,
                    defext: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetUserInputsE"]
            pub static mut GetUserInputs: ::std::option::Option<
                unsafe extern "C" fn(
                    title: *const ::std::os::raw::c_char,
                    num_inputs: ::std::os::raw::c_int,
                    captions_csv: *const ::std::os::raw::c_char,
                    retvals_csv: *mut ::std::os::raw::c_char,
                    retvals_csv_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10GoToMarkerE"]
            pub static mut GoToMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    marker_index: ::std::os::raw::c_int,
                    use_timeline_order: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10GoToRegionE"]
            pub static mut GoToRegion: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    region_index: ::std::os::raw::c_int,
                    use_timeline_order: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14GR_SelectColorE"]
            pub static mut GR_SelectColor: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    colorOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11GSC_mainwndE"]
            pub static mut GSC_mainwnd: ::std::option::Option<
                unsafe extern "C" fn(t: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12guidToStringE"]
            pub static mut guidToString: ::std::option::Option<
                unsafe extern "C" fn(g: *const root::GUID, destNeed64: *mut ::std::os::raw::c_char),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11HasExtStateE"]
            pub static mut HasExtState: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *const ::std::os::raw::c_char,
                    key: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20HasTrackMIDIProgramsE"]
            pub static mut HasTrackMIDIPrograms: ::std::option::Option<
                unsafe extern "C" fn(track: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22HasTrackMIDIProgramsExE"]
            pub static mut HasTrackMIDIProgramsEx: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    track: *mut root::MediaTrack,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions8Help_SetE"]
            pub static mut Help_Set: ::std::option::Option<
                unsafe extern "C" fn(
                    helpstring: *const ::std::os::raw::c_char,
                    is_temporary_help: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20HiresPeaksFromSourceE"]
            pub static mut HiresPeaksFromSource: ::std::option::Option<
                unsafe extern "C" fn(
                    src: *mut root::PCM_source,
                    block: *mut root::PCM_source_peaktransfer_t,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16image_resolve_fnE"]
            pub static mut image_resolve_fn: ::std::option::Option<
                unsafe extern "C" fn(
                    in_: *const ::std::os::raw::c_char,
                    out: *mut ::std::os::raw::c_char,
                    out_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20InsertAutomationItemE"]
            pub static mut InsertAutomationItem: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    pool_id: ::std::os::raw::c_int,
                    position: f64,
                    length: f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19InsertEnvelopePointE"]
            pub static mut InsertEnvelopePoint: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    time: f64,
                    value: f64,
                    shape: ::std::os::raw::c_int,
                    tension: f64,
                    selected: bool,
                    noSortInOptional: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21InsertEnvelopePointExE"]
            pub static mut InsertEnvelopePointEx: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                    time: f64,
                    value: f64,
                    shape: ::std::os::raw::c_int,
                    tension: f64,
                    selected: bool,
                    noSortInOptional: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11InsertMediaE"]
            pub static mut InsertMedia: ::std::option::Option<
                unsafe extern "C" fn(
                    file: *const ::std::os::raw::c_char,
                    mode: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18InsertMediaSectionE"]
            pub static mut InsertMediaSection: ::std::option::Option<
                unsafe extern "C" fn(
                    file: *const ::std::os::raw::c_char,
                    mode: ::std::os::raw::c_int,
                    startpct: f64,
                    endpct: f64,
                    pitchshift: f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18InsertTrackAtIndexE"]
            pub static mut InsertTrackAtIndex: ::std::option::Option<
                unsafe extern "C" fn(idx: ::std::os::raw::c_int, wantDefaults: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17IsInRealTimeAudioE"]
            pub static mut IsInRealTimeAudio:
                ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27IsItemTakeActiveForPlaybackE"]
            pub static mut IsItemTakeActiveForPlayback: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    take: *mut root::MediaItem_Take,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16IsMediaExtensionE"]
            pub static mut IsMediaExtension: ::std::option::Option<
                unsafe extern "C" fn(ext: *const ::std::os::raw::c_char, wantOthers: bool) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19IsMediaItemSelectedE"]
            pub static mut IsMediaItemSelected:
                ::std::option::Option<unsafe extern "C" fn(item: *mut root::MediaItem) -> bool>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14IsProjectDirtyE"]
            pub static mut IsProjectDirty: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions8IsREAPERE"]
            pub static mut IsREAPER: ::std::option::Option<unsafe extern "C" fn() -> bool>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15IsTrackSelectedE"]
            pub static mut IsTrackSelected:
                ::std::option::Option<unsafe extern "C" fn(track: *mut root::MediaTrack) -> bool>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14IsTrackVisibleE"]
            pub static mut IsTrackVisible: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack, mixer: bool) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15joystick_createE"]
            pub static mut joystick_create: ::std::option::Option<
                unsafe extern "C" fn(
                    guid: *const root::GUID,
                )
                    -> *mut root::reaper_functions::joystick_device,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16joystick_destroyE"]
            pub static mut joystick_destroy: ::std::option::Option<
                unsafe extern "C" fn(device: *mut root::reaper_functions::joystick_device),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13joystick_enumE"]
            pub static mut joystick_enum: ::std::option::Option<
                unsafe extern "C" fn(
                    index: ::std::os::raw::c_int,
                    namestrOutOptional: *mut *const ::std::os::raw::c_char,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16joystick_getaxisE"]
            pub static mut joystick_getaxis: ::std::option::Option<
                unsafe extern "C" fn(
                    dev: *mut root::reaper_functions::joystick_device,
                    axis: ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22joystick_getbuttonmaskE"]
            pub static mut joystick_getbuttonmask: ::std::option::Option<
                unsafe extern "C" fn(
                    dev: *mut root::reaper_functions::joystick_device,
                ) -> ::std::os::raw::c_uint,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16joystick_getinfoE"]
            pub static mut joystick_getinfo: ::std::option::Option<
                unsafe extern "C" fn(
                    dev: *mut root::reaper_functions::joystick_device,
                    axesOutOptional: *mut ::std::os::raw::c_int,
                    povsOutOptional: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15joystick_getpovE"]
            pub static mut joystick_getpov: ::std::option::Option<
                unsafe extern "C" fn(
                    dev: *mut root::reaper_functions::joystick_device,
                    pov: ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15joystick_updateE"]
            pub static mut joystick_update: ::std::option::Option<
                unsafe extern "C" fn(dev: *mut root::reaper_functions::joystick_device) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20kbd_enumerateActionsE"]
            pub static mut kbd_enumerateActions: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *mut root::KbdSectionInfo,
                    idx: ::std::os::raw::c_int,
                    nameOut: *mut *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17kbd_formatKeyNameE"]
            pub static mut kbd_formatKeyName: ::std::option::Option<
                unsafe extern "C" fn(ac: *mut root::ACCEL, s: *mut ::std::os::raw::c_char),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18kbd_getCommandNameE"]
            pub static mut kbd_getCommandName: ::std::option::Option<
                unsafe extern "C" fn(
                    cmd: ::std::os::raw::c_int,
                    s: *mut ::std::os::raw::c_char,
                    section: *mut root::KbdSectionInfo,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18kbd_getTextFromCmdE"]
            pub static mut kbd_getTextFromCmd: ::std::option::Option<
                unsafe extern "C" fn(
                    cmd: root::DWORD,
                    section: *mut root::KbdSectionInfo,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18KBD_OnMainActionExE"]
            pub static mut KBD_OnMainActionEx: ::std::option::Option<
                unsafe extern "C" fn(
                    cmd: ::std::os::raw::c_int,
                    val: ::std::os::raw::c_int,
                    valhw: ::std::os::raw::c_int,
                    relmode: ::std::os::raw::c_int,
                    hwnd: root::HWND,
                    proj: *mut root::ReaProject,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15kbd_OnMidiEventE"]
            pub static mut kbd_OnMidiEvent: ::std::option::Option<
                unsafe extern "C" fn(
                    evt: *mut root::MIDI_event_t,
                    dev_index: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14kbd_OnMidiListE"]
            pub static mut kbd_OnMidiList: ::std::option::Option<
                unsafe extern "C" fn(
                    list: *mut root::MIDI_eventlist,
                    dev_index: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22kbd_ProcessActionsMenuE"]
            pub static mut kbd_ProcessActionsMenu: ::std::option::Option<
                unsafe extern "C" fn(menu: root::HMENU, section: *mut root::KbdSectionInfo),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions28kbd_processMidiEventActionExE"]
            pub static mut kbd_processMidiEventActionEx: ::std::option::Option<
                unsafe extern "C" fn(
                    evt: *mut root::MIDI_event_t,
                    section: *mut root::KbdSectionInfo,
                    hwndCtx: root::HWND,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17kbd_reprocessMenuE"]
            pub static mut kbd_reprocessMenu: ::std::option::Option<
                unsafe extern "C" fn(menu: root::HMENU, section: *mut root::KbdSectionInfo),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26kbd_RunCommandThroughHooksE"]
            pub static mut kbd_RunCommandThroughHooks: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *mut root::KbdSectionInfo,
                    actionCommandID: *mut ::std::os::raw::c_int,
                    val: *mut ::std::os::raw::c_int,
                    valhw: *mut ::std::os::raw::c_int,
                    relmode: *mut ::std::os::raw::c_int,
                    hwnd: root::HWND,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24kbd_translateAcceleratorE"]
            pub static mut kbd_translateAccelerator: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    msg: *mut root::MSG,
                    section: *mut root::KbdSectionInfo,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18kbd_translateMouseE"]
            pub static mut kbd_translateMouse: ::std::option::Option<
                unsafe extern "C" fn(
                    winmsg: *mut ::std::os::raw::c_void,
                    midimsg: *mut ::std::os::raw::c_uchar,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE__DestroyE"]
            pub static mut LICE__Destroy: ::std::option::Option<
                unsafe extern "C" fn(bm: *mut root::reaper_functions::LICE_IBitmap),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17LICE__DestroyFontE"]
            pub static mut LICE__DestroyFont: ::std::option::Option<
                unsafe extern "C" fn(font: *mut root::reaper_functions::LICE_IFont),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14LICE__DrawTextE"]
            pub static mut LICE__DrawText: ::std::option::Option<
                unsafe extern "C" fn(
                    font: *mut root::reaper_functions::LICE_IFont,
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                    str: *const ::std::os::raw::c_char,
                    strcnt: ::std::os::raw::c_int,
                    rect: *mut root::RECT,
                    dtFlags: root::UINT,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE__GetBitsE"]
            pub static mut LICE__GetBits: ::std::option::Option<
                unsafe extern "C" fn(
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11LICE__GetDCE"]
            pub static mut LICE__GetDC: ::std::option::Option<
                unsafe extern "C" fn(bm: *mut root::reaper_functions::LICE_IBitmap) -> root::HDC,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15LICE__GetHeightE"]
            pub static mut LICE__GetHeight: ::std::option::Option<
                unsafe extern "C" fn(
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16LICE__GetRowSpanE"]
            pub static mut LICE__GetRowSpan: ::std::option::Option<
                unsafe extern "C" fn(
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14LICE__GetWidthE"]
            pub static mut LICE__GetWidth: ::std::option::Option<
                unsafe extern "C" fn(
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15LICE__IsFlippedE"]
            pub static mut LICE__IsFlipped: ::std::option::Option<
                unsafe extern "C" fn(bm: *mut root::reaper_functions::LICE_IBitmap) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12LICE__resizeE"]
            pub static mut LICE__resize: ::std::option::Option<
                unsafe extern "C" fn(
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16LICE__SetBkColorE"]
            pub static mut LICE__SetBkColor: ::std::option::Option<
                unsafe extern "C" fn(
                    font: *mut root::reaper_functions::LICE_IFont,
                    color: root::reaper_functions::LICE_pixel,
                ) -> root::reaper_functions::LICE_pixel,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18LICE__SetFromHFontE"]
            pub static mut LICE__SetFromHFont: ::std::option::Option<
                unsafe extern "C" fn(
                    font: *mut root::reaper_functions::LICE_IFont,
                    hfont: root::HFONT,
                    flags: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18LICE__SetTextColorE"]
            pub static mut LICE__SetTextColor: ::std::option::Option<
                unsafe extern "C" fn(
                    font: *mut root::reaper_functions::LICE_IFont,
                    color: root::reaper_functions::LICE_pixel,
                ) -> root::reaper_functions::LICE_pixel,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24LICE__SetTextCombineModeE"]
            pub static mut LICE__SetTextCombineMode: ::std::option::Option<
                unsafe extern "C" fn(
                    ifont: *mut root::reaper_functions::LICE_IFont,
                    mode: ::std::os::raw::c_int,
                    alpha: f32,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions8LICE_ArcE"]
            pub static mut LICE_Arc: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    cx: f32,
                    cy: f32,
                    r: f32,
                    minAngle: f32,
                    maxAngle: f32,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                    aa: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions9LICE_BlitE"]
            pub static mut LICE_Blit: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    src: *mut root::reaper_functions::LICE_IBitmap,
                    dstx: ::std::os::raw::c_int,
                    dsty: ::std::os::raw::c_int,
                    srcx: ::std::os::raw::c_int,
                    srcy: ::std::os::raw::c_int,
                    srcw: ::std::os::raw::c_int,
                    srch: ::std::os::raw::c_int,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions9LICE_BlurE"]
            pub static mut LICE_Blur: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    src: *mut root::reaper_functions::LICE_IBitmap,
                    dstx: ::std::os::raw::c_int,
                    dsty: ::std::os::raw::c_int,
                    srcx: ::std::os::raw::c_int,
                    srcy: ::std::os::raw::c_int,
                    srcw: ::std::os::raw::c_int,
                    srch: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17LICE_BorderedRectE"]
            pub static mut LICE_BorderedRect: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    bgcolor: root::reaper_functions::LICE_pixel,
                    fgcolor: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11LICE_CircleE"]
            pub static mut LICE_Circle: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    cx: f32,
                    cy: f32,
                    r: f32,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                    aa: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10LICE_ClearE"]
            pub static mut LICE_Clear: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    color: root::reaper_functions::LICE_pixel,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14LICE_ClearRectE"]
            pub static mut LICE_ClearRect: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    mask: root::reaper_functions::LICE_pixel,
                    orbits: root::reaper_functions::LICE_pixel,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE_ClipLineE"]
            pub static mut LICE_ClipLine: ::std::option::Option<
                unsafe extern "C" fn(
                    pX1Out: *mut ::std::os::raw::c_int,
                    pY1Out: *mut ::std::os::raw::c_int,
                    pX2Out: *mut ::std::os::raw::c_int,
                    pY2Out: *mut ::std::os::raw::c_int,
                    xLo: ::std::os::raw::c_int,
                    yLo: ::std::os::raw::c_int,
                    xHi: ::std::os::raw::c_int,
                    yHi: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions9LICE_CopyE"]
            pub static mut LICE_Copy: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    src: *mut root::reaper_functions::LICE_IBitmap,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17LICE_CreateBitmapE"]
            pub static mut LICE_CreateBitmap: ::std::option::Option<
                unsafe extern "C" fn(
                    mode: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                ) -> *mut root::reaper_functions::LICE_IBitmap,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15LICE_CreateFontE"]
            pub static mut LICE_CreateFont: ::std::option::Option<
                unsafe extern "C" fn() -> *mut root::reaper_functions::LICE_IFont,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16LICE_DrawCBezierE"]
            pub static mut LICE_DrawCBezier: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    xstart: f64,
                    ystart: f64,
                    xctl1: f64,
                    yctl1: f64,
                    xctl2: f64,
                    yctl2: f64,
                    xend: f64,
                    yend: f64,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                    aa: bool,
                    tol: f64,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE_DrawCharE"]
            pub static mut LICE_DrawChar: ::std::option::Option<
                unsafe extern "C" fn(
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    c: ::std::os::raw::c_char,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14LICE_DrawGlyphE"]
            pub static mut LICE_DrawGlyph: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    color: root::reaper_functions::LICE_pixel,
                    alphas: *mut root::reaper_functions::LICE_pixel_chan,
                    glyph_w: ::std::os::raw::c_int,
                    glyph_h: ::std::os::raw::c_int,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE_DrawRectE"]
            pub static mut LICE_DrawRect: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE_DrawTextE"]
            pub static mut LICE_DrawText: ::std::option::Option<
                unsafe extern "C" fn(
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    string: *const ::std::os::raw::c_char,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16LICE_FillCBezierE"]
            pub static mut LICE_FillCBezier: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    xstart: f64,
                    ystart: f64,
                    xctl1: f64,
                    yctl1: f64,
                    xctl2: f64,
                    yctl2: f64,
                    xend: f64,
                    yend: f64,
                    yfill: ::std::os::raw::c_int,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                    aa: bool,
                    tol: f64,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15LICE_FillCircleE"]
            pub static mut LICE_FillCircle: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    cx: f32,
                    cy: f32,
                    r: f32,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                    aa: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22LICE_FillConvexPolygonE"]
            pub static mut LICE_FillConvexPolygon: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x: *mut ::std::os::raw::c_int,
                    y: *mut ::std::os::raw::c_int,
                    npoints: ::std::os::raw::c_int,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE_FillRectE"]
            pub static mut LICE_FillRect: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18LICE_FillTrapezoidE"]
            pub static mut LICE_FillTrapezoid: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x1a: ::std::os::raw::c_int,
                    x1b: ::std::os::raw::c_int,
                    y1: ::std::os::raw::c_int,
                    x2a: ::std::os::raw::c_int,
                    x2b: ::std::os::raw::c_int,
                    y2: ::std::os::raw::c_int,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17LICE_FillTriangleE"]
            pub static mut LICE_FillTriangle: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x1: ::std::os::raw::c_int,
                    y1: ::std::os::raw::c_int,
                    x2: ::std::os::raw::c_int,
                    y2: ::std::os::raw::c_int,
                    x3: ::std::os::raw::c_int,
                    y3: ::std::os::raw::c_int,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE_GetPixelE"]
            pub static mut LICE_GetPixel: ::std::option::Option<
                unsafe extern "C" fn(
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                ) -> root::reaper_functions::LICE_pixel,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE_GradRectE"]
            pub static mut LICE_GradRect: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    dstx: ::std::os::raw::c_int,
                    dsty: ::std::os::raw::c_int,
                    dstw: ::std::os::raw::c_int,
                    dsth: ::std::os::raw::c_int,
                    ir: f32,
                    ig: f32,
                    ib: f32,
                    ia: f32,
                    drdx: f32,
                    dgdx: f32,
                    dbdx: f32,
                    dadx: f32,
                    drdy: f32,
                    dgdy: f32,
                    dbdy: f32,
                    dady: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions9LICE_LineE"]
            pub static mut LICE_Line: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x1: f32,
                    y1: f32,
                    x2: f32,
                    y2: f32,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                    aa: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12LICE_LineIntE"]
            pub static mut LICE_LineInt: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x1: ::std::os::raw::c_int,
                    y1: ::std::os::raw::c_int,
                    x2: ::std::os::raw::c_int,
                    y2: ::std::os::raw::c_int,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                    aa: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12LICE_LoadPNGE"]
            pub static mut LICE_LoadPNG: ::std::option::Option<
                unsafe extern "C" fn(
                    filename: *const ::std::os::raw::c_char,
                    bmp: *mut root::reaper_functions::LICE_IBitmap,
                ) -> *mut root::reaper_functions::LICE_IBitmap,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24LICE_LoadPNGFromResourceE"]
            pub static mut LICE_LoadPNGFromResource: ::std::option::Option<
                unsafe extern "C" fn(
                    hInst: root::HINSTANCE,
                    resid: *const ::std::os::raw::c_char,
                    bmp: *mut root::reaper_functions::LICE_IBitmap,
                ) -> *mut root::reaper_functions::LICE_IBitmap,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16LICE_MeasureTextE"]
            pub static mut LICE_MeasureText: ::std::option::Option<
                unsafe extern "C" fn(
                    string: *const ::std::os::raw::c_char,
                    w: *mut ::std::os::raw::c_int,
                    h: *mut ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20LICE_MultiplyAddRectE"]
            pub static mut LICE_MultiplyAddRect: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                    rsc: f32,
                    gsc: f32,
                    bsc: f32,
                    asc: f32,
                    radd: f32,
                    gadd: f32,
                    badd: f32,
                    aadd: f32,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13LICE_PutPixelE"]
            pub static mut LICE_PutPixel: ::std::option::Option<
                unsafe extern "C" fn(
                    bm: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    color: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16LICE_RotatedBlitE"]
            pub static mut LICE_RotatedBlit: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    src: *mut root::reaper_functions::LICE_IBitmap,
                    dstx: ::std::os::raw::c_int,
                    dsty: ::std::os::raw::c_int,
                    dstw: ::std::os::raw::c_int,
                    dsth: ::std::os::raw::c_int,
                    srcx: f32,
                    srcy: f32,
                    srcw: f32,
                    srch: f32,
                    angle: f32,
                    cliptosourcerect: bool,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                    rotxcent: f32,
                    rotycent: f32,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14LICE_RoundRectE"]
            pub static mut LICE_RoundRect: ::std::option::Option<
                unsafe extern "C" fn(
                    drawbm: *mut root::reaper_functions::LICE_IBitmap,
                    xpos: f32,
                    ypos: f32,
                    w: f32,
                    h: f32,
                    cornerradius: ::std::os::raw::c_int,
                    col: root::reaper_functions::LICE_pixel,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                    aa: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15LICE_ScaledBlitE"]
            pub static mut LICE_ScaledBlit: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    src: *mut root::reaper_functions::LICE_IBitmap,
                    dstx: ::std::os::raw::c_int,
                    dsty: ::std::os::raw::c_int,
                    dstw: ::std::os::raw::c_int,
                    dsth: ::std::os::raw::c_int,
                    srcx: f32,
                    srcy: f32,
                    srcw: f32,
                    srch: f32,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15LICE_SimpleFillE"]
            pub static mut LICE_SimpleFill: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    newcolor: root::reaper_functions::LICE_pixel,
                    comparemask: root::reaper_functions::LICE_pixel,
                    keepmask: root::reaper_functions::LICE_pixel,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12Loop_OnArrowE"]
            pub static mut Loop_OnArrow: ::std::option::Option<
                unsafe extern "C" fn(
                    project: *mut root::ReaProject,
                    direction: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14Main_OnCommandE"]
            pub static mut Main_OnCommand: ::std::option::Option<
                unsafe extern "C" fn(command: ::std::os::raw::c_int, flag: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16Main_OnCommandExE"]
            pub static mut Main_OnCommandEx: ::std::option::Option<
                unsafe extern "C" fn(
                    command: ::std::os::raw::c_int,
                    flag: ::std::os::raw::c_int,
                    proj: *mut root::ReaProject,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16Main_openProjectE"]
            pub static mut Main_openProject:
                ::std::option::Option<unsafe extern "C" fn(name: *const ::std::os::raw::c_char)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16Main_SaveProjectE"]
            pub static mut Main_SaveProject: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject, forceSaveAsInOptional: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19Main_UpdateLoopInfoE"]
            pub static mut Main_UpdateLoopInfo:
                ::std::option::Option<unsafe extern "C" fn(ignoremask: ::std::os::raw::c_int)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16MarkProjectDirtyE"]
            pub static mut MarkProjectDirty:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19MarkTrackItemsDirtyE"]
            pub static mut MarkTrackItemsDirty: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack, item: *mut root::MediaItem),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18Master_GetPlayRateE"]
            pub static mut Master_GetPlayRate:
                ::std::option::Option<unsafe extern "C" fn(project: *mut root::ReaProject) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24Master_GetPlayRateAtTimeE"]
            pub static mut Master_GetPlayRateAtTime: ::std::option::Option<
                unsafe extern "C" fn(time_s: f64, proj: *mut root::ReaProject) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15Master_GetTempoE"]
            pub static mut Master_GetTempo: ::std::option::Option<unsafe extern "C" fn() -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24Master_NormalizePlayRateE"]
            pub static mut Master_NormalizePlayRate: ::std::option::Option<
                unsafe extern "C" fn(playrate: f64, isnormalized: bool) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21Master_NormalizeTempoE"]
            pub static mut Master_NormalizeTempo:
                ::std::option::Option<unsafe extern "C" fn(bpm: f64, isnormalized: bool) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions2MBE"]
            pub static mut MB: ::std::option::Option<
                unsafe extern "C" fn(
                    msg: *const ::std::os::raw::c_char,
                    title: *const ::std::os::raw::c_char,
                    type_: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26MediaItemDescendsFromTrackE"]
            pub static mut MediaItemDescendsFromTrack: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    track: *mut root::MediaTrack,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14MIDI_CountEvtsE"]
            pub static mut MIDI_CountEvts: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    notecntOut: *mut ::std::os::raw::c_int,
                    ccevtcntOut: *mut ::std::os::raw::c_int,
                    textsyxevtcntOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13MIDI_DeleteCCE"]
            pub static mut MIDI_DeleteCC: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    ccidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14MIDI_DeleteEvtE"]
            pub static mut MIDI_DeleteEvt: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    evtidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15MIDI_DeleteNoteE"]
            pub static mut MIDI_DeleteNote: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    noteidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23MIDI_DeleteTextSysexEvtE"]
            pub static mut MIDI_DeleteTextSysexEvt: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    textsyxevtidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16MIDI_DisableSortE"]
            pub static mut MIDI_DisableSort:
                ::std::option::Option<unsafe extern "C" fn(take: *mut root::MediaItem_Take)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14MIDI_EnumSelCCE"]
            pub static mut MIDI_EnumSelCC: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    ccidx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16MIDI_EnumSelEvtsE"]
            pub static mut MIDI_EnumSelEvts: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    evtidx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17MIDI_EnumSelNotesE"]
            pub static mut MIDI_EnumSelNotes: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    noteidx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25MIDI_EnumSelTextSysexEvtsE"]
            pub static mut MIDI_EnumSelTextSysexEvts: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    textsyxidx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21MIDI_eventlist_CreateE"]
            pub static mut MIDI_eventlist_Create:
                ::std::option::Option<unsafe extern "C" fn() -> *mut root::MIDI_eventlist>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22MIDI_eventlist_DestroyE"]
            pub static mut MIDI_eventlist_Destroy:
                ::std::option::Option<unsafe extern "C" fn(evtlist: *mut root::MIDI_eventlist)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15MIDI_GetAllEvtsE"]
            pub static mut MIDI_GetAllEvts: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    bufNeedBig: *mut ::std::os::raw::c_char,
                    bufNeedBig_sz: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10MIDI_GetCCE"]
            pub static mut MIDI_GetCC: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    ccidx: ::std::os::raw::c_int,
                    selectedOut: *mut bool,
                    mutedOut: *mut bool,
                    ppqposOut: *mut f64,
                    chanmsgOut: *mut ::std::os::raw::c_int,
                    chanOut: *mut ::std::os::raw::c_int,
                    msg2Out: *mut ::std::os::raw::c_int,
                    msg3Out: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15MIDI_GetCCShapeE"]
            pub static mut MIDI_GetCCShape: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    ccidx: ::std::os::raw::c_int,
                    shapeOut: *mut ::std::os::raw::c_int,
                    beztensionOut: *mut f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11MIDI_GetEvtE"]
            pub static mut MIDI_GetEvt: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    evtidx: ::std::os::raw::c_int,
                    selectedOut: *mut bool,
                    mutedOut: *mut bool,
                    ppqposOut: *mut f64,
                    msg: *mut ::std::os::raw::c_char,
                    msg_sz: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12MIDI_GetGridE"]
            pub static mut MIDI_GetGrid: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    swingOutOptional: *mut f64,
                    noteLenOutOptional: *mut f64,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12MIDI_GetHashE"]
            pub static mut MIDI_GetHash: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    notesonly: bool,
                    hash: *mut ::std::os::raw::c_char,
                    hash_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12MIDI_GetNoteE"]
            pub static mut MIDI_GetNote: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    noteidx: ::std::os::raw::c_int,
                    selectedOut: *mut bool,
                    mutedOut: *mut bool,
                    startppqposOut: *mut f64,
                    endppqposOut: *mut f64,
                    chanOut: *mut ::std::os::raw::c_int,
                    pitchOut: *mut ::std::os::raw::c_int,
                    velOut: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27MIDI_GetPPQPos_EndOfMeasureE"]
            pub static mut MIDI_GetPPQPos_EndOfMeasure: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take, ppqpos: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions29MIDI_GetPPQPos_StartOfMeasureE"]
            pub static mut MIDI_GetPPQPos_StartOfMeasure: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take, ppqpos: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24MIDI_GetPPQPosFromProjQNE"]
            pub static mut MIDI_GetPPQPosFromProjQN: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take, projqn: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26MIDI_GetPPQPosFromProjTimeE"]
            pub static mut MIDI_GetPPQPosFromProjTime: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take, projtime: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24MIDI_GetProjQNFromPPQPosE"]
            pub static mut MIDI_GetProjQNFromPPQPos: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take, ppqpos: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26MIDI_GetProjTimeFromPPQPosE"]
            pub static mut MIDI_GetProjTimeFromPPQPos: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take, ppqpos: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13MIDI_GetScaleE"]
            pub static mut MIDI_GetScale: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    rootOut: *mut ::std::os::raw::c_int,
                    scaleOut: *mut ::std::os::raw::c_int,
                    name: *mut ::std::os::raw::c_char,
                    name_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20MIDI_GetTextSysexEvtE"]
            pub static mut MIDI_GetTextSysexEvt: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    textsyxevtidx: ::std::os::raw::c_int,
                    selectedOutOptional: *mut bool,
                    mutedOutOptional: *mut bool,
                    ppqposOutOptional: *mut f64,
                    typeOutOptional: *mut ::std::os::raw::c_int,
                    msgOptional: *mut ::std::os::raw::c_char,
                    msgOptional_sz: *mut ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17MIDI_GetTrackHashE"]
            pub static mut MIDI_GetTrackHash: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    notesonly: bool,
                    hash: *mut ::std::os::raw::c_char,
                    hash_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13MIDI_InsertCCE"]
            pub static mut MIDI_InsertCC: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    selected: bool,
                    muted: bool,
                    ppqpos: f64,
                    chanmsg: ::std::os::raw::c_int,
                    chan: ::std::os::raw::c_int,
                    msg2: ::std::os::raw::c_int,
                    msg3: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14MIDI_InsertEvtE"]
            pub static mut MIDI_InsertEvt: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    selected: bool,
                    muted: bool,
                    ppqpos: f64,
                    bytestr: *const ::std::os::raw::c_char,
                    bytestr_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15MIDI_InsertNoteE"]
            pub static mut MIDI_InsertNote: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    selected: bool,
                    muted: bool,
                    startppqpos: f64,
                    endppqpos: f64,
                    chan: ::std::os::raw::c_int,
                    pitch: ::std::os::raw::c_int,
                    vel: ::std::os::raw::c_int,
                    noSortInOptional: *const bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23MIDI_InsertTextSysexEvtE"]
            pub static mut MIDI_InsertTextSysexEvt: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    selected: bool,
                    muted: bool,
                    ppqpos: f64,
                    type_: ::std::os::raw::c_int,
                    bytestr: *const ::std::os::raw::c_char,
                    bytestr_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11midi_reinitE"]
            pub static mut midi_reinit: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14MIDI_SelectAllE"]
            pub static mut MIDI_SelectAll: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take, select: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15MIDI_SetAllEvtsE"]
            pub static mut MIDI_SetAllEvts: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    buf: *const ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10MIDI_SetCCE"]
            pub static mut MIDI_SetCC: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    ccidx: ::std::os::raw::c_int,
                    selectedInOptional: *const bool,
                    mutedInOptional: *const bool,
                    ppqposInOptional: *const f64,
                    chanmsgInOptional: *const ::std::os::raw::c_int,
                    chanInOptional: *const ::std::os::raw::c_int,
                    msg2InOptional: *const ::std::os::raw::c_int,
                    msg3InOptional: *const ::std::os::raw::c_int,
                    noSortInOptional: *const bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15MIDI_SetCCShapeE"]
            pub static mut MIDI_SetCCShape: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    ccidx: ::std::os::raw::c_int,
                    shape: ::std::os::raw::c_int,
                    beztension: f64,
                    noSortInOptional: *const bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11MIDI_SetEvtE"]
            pub static mut MIDI_SetEvt: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    evtidx: ::std::os::raw::c_int,
                    selectedInOptional: *const bool,
                    mutedInOptional: *const bool,
                    ppqposInOptional: *const f64,
                    msgOptional: *const ::std::os::raw::c_char,
                    msgOptional_sz: ::std::os::raw::c_int,
                    noSortInOptional: *const bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19MIDI_SetItemExtentsE"]
            pub static mut MIDI_SetItemExtents: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem, startQN: f64, endQN: f64) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12MIDI_SetNoteE"]
            pub static mut MIDI_SetNote: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    noteidx: ::std::os::raw::c_int,
                    selectedInOptional: *const bool,
                    mutedInOptional: *const bool,
                    startppqposInOptional: *const f64,
                    endppqposInOptional: *const f64,
                    chanInOptional: *const ::std::os::raw::c_int,
                    pitchInOptional: *const ::std::os::raw::c_int,
                    velInOptional: *const ::std::os::raw::c_int,
                    noSortInOptional: *const bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20MIDI_SetTextSysexEvtE"]
            pub static mut MIDI_SetTextSysexEvt: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    textsyxevtidx: ::std::os::raw::c_int,
                    selectedInOptional: *const bool,
                    mutedInOptional: *const bool,
                    ppqposInOptional: *const f64,
                    typeInOptional: *const ::std::os::raw::c_int,
                    msgOptional: *const ::std::os::raw::c_char,
                    msgOptional_sz: ::std::os::raw::c_int,
                    noSortInOptional: *const bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions9MIDI_SortE"]
            pub static mut MIDI_Sort:
                ::std::option::Option<unsafe extern "C" fn(take: *mut root::MediaItem_Take)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20MIDIEditor_GetActiveE"]
            pub static mut MIDIEditor_GetActive:
                ::std::option::Option<unsafe extern "C" fn() -> root::HWND>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18MIDIEditor_GetModeE"]
            pub static mut MIDIEditor_GetMode: ::std::option::Option<
                unsafe extern "C" fn(midieditor: root::HWND) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25MIDIEditor_GetSetting_intE"]
            pub static mut MIDIEditor_GetSetting_int: ::std::option::Option<
                unsafe extern "C" fn(
                    midieditor: root::HWND,
                    setting_desc: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25MIDIEditor_GetSetting_strE"]
            pub static mut MIDIEditor_GetSetting_str: ::std::option::Option<
                unsafe extern "C" fn(
                    midieditor: root::HWND,
                    setting_desc: *const ::std::os::raw::c_char,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18MIDIEditor_GetTakeE"]
            pub static mut MIDIEditor_GetTake: ::std::option::Option<
                unsafe extern "C" fn(midieditor: root::HWND) -> *mut root::MediaItem_Take,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions32MIDIEditor_LastFocused_OnCommandE"]
            pub static mut MIDIEditor_LastFocused_OnCommand: ::std::option::Option<
                unsafe extern "C" fn(
                    command_id: ::std::os::raw::c_int,
                    islistviewcommand: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20MIDIEditor_OnCommandE"]
            pub static mut MIDIEditor_OnCommand: ::std::option::Option<
                unsafe extern "C" fn(
                    midieditor: root::HWND,
                    command_id: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25MIDIEditor_SetSetting_intE"]
            pub static mut MIDIEditor_SetSetting_int: ::std::option::Option<
                unsafe extern "C" fn(
                    midieditor: root::HWND,
                    setting_desc: *const ::std::os::raw::c_char,
                    setting: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions8mkpanstrE"]
            pub static mut mkpanstr: ::std::option::Option<
                unsafe extern "C" fn(strNeed64: *mut ::std::os::raw::c_char, pan: f64),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11mkvolpanstrE"]
            pub static mut mkvolpanstr: ::std::option::Option<
                unsafe extern "C" fn(strNeed64: *mut ::std::os::raw::c_char, vol: f64, pan: f64),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions8mkvolstrE"]
            pub static mut mkvolstr: ::std::option::Option<
                unsafe extern "C" fn(strNeed64: *mut ::std::os::raw::c_char, vol: f64),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14MoveEditCursorE"]
            pub static mut MoveEditCursor:
                ::std::option::Option<unsafe extern "C" fn(adjamt: f64, dosel: bool)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20MoveMediaItemToTrackE"]
            pub static mut MoveMediaItemToTrack: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    desttr: *mut root::MediaTrack,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13MuteAllTracksE"]
            pub static mut MuteAllTracks: ::std::option::Option<unsafe extern "C" fn(mute: bool)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14my_getViewportE"]
            pub static mut my_getViewport: ::std::option::Option<
                unsafe extern "C" fn(r: *mut root::RECT, sr: *const root::RECT, wantWorkArea: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18NamedCommandLookupE"]
            pub static mut NamedCommandLookup: ::std::option::Option<
                unsafe extern "C" fn(
                    command_name: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13OnPauseButtonE"]
            pub static mut OnPauseButton: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15OnPauseButtonExE"]
            pub static mut OnPauseButtonEx:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12OnPlayButtonE"]
            pub static mut OnPlayButton: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14OnPlayButtonExE"]
            pub static mut OnPlayButtonEx:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12OnStopButtonE"]
            pub static mut OnStopButton: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14OnStopButtonExE"]
            pub static mut OnStopButtonEx:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18OpenColorThemeFileE"]
            pub static mut OpenColorThemeFile: ::std::option::Option<
                unsafe extern "C" fn(fn_: *const ::std::os::raw::c_char) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17OpenMediaExplorerE"]
            pub static mut OpenMediaExplorer: ::std::option::Option<
                unsafe extern "C" fn(
                    mediafn: *const ::std::os::raw::c_char,
                    play: bool,
                ) -> root::HWND,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21OscLocalMessageToHostE"]
            pub static mut OscLocalMessageToHost: ::std::option::Option<
                unsafe extern "C" fn(
                    message: *const ::std::os::raw::c_char,
                    valueInOptional: *const f64,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13parse_timestrE"]
            pub static mut parse_timestr: ::std::option::Option<
                unsafe extern "C" fn(buf: *const ::std::os::raw::c_char) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17parse_timestr_lenE"]
            pub static mut parse_timestr_len: ::std::option::Option<
                unsafe extern "C" fn(
                    buf: *const ::std::os::raw::c_char,
                    offset: f64,
                    modeoverride: ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17parse_timestr_posE"]
            pub static mut parse_timestr_pos: ::std::option::Option<
                unsafe extern "C" fn(
                    buf: *const ::std::os::raw::c_char,
                    modeoverride: ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11parsepanstrE"]
            pub static mut parsepanstr: ::std::option::Option<
                unsafe extern "C" fn(str: *const ::std::os::raw::c_char) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15PCM_Sink_CreateE"]
            pub static mut PCM_Sink_Create: ::std::option::Option<
                unsafe extern "C" fn(
                    filename: *const ::std::os::raw::c_char,
                    cfg: *const ::std::os::raw::c_char,
                    cfg_sz: ::std::os::raw::c_int,
                    nch: ::std::os::raw::c_int,
                    srate: ::std::os::raw::c_int,
                    buildpeaks: bool,
                ) -> *mut root::PCM_sink,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17PCM_Sink_CreateExE"]
            pub static mut PCM_Sink_CreateEx: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    filename: *const ::std::os::raw::c_char,
                    cfg: *const ::std::os::raw::c_char,
                    cfg_sz: ::std::os::raw::c_int,
                    nch: ::std::os::raw::c_int,
                    srate: ::std::os::raw::c_int,
                    buildpeaks: bool,
                ) -> *mut root::PCM_sink,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23PCM_Sink_CreateMIDIFileE"]
            pub static mut PCM_Sink_CreateMIDIFile: ::std::option::Option<
                unsafe extern "C" fn(
                    filename: *const ::std::os::raw::c_char,
                    cfg: *const ::std::os::raw::c_char,
                    cfg_sz: ::std::os::raw::c_int,
                    bpm: f64,
                    div: ::std::os::raw::c_int,
                ) -> *mut root::PCM_sink,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25PCM_Sink_CreateMIDIFileExE"]
            pub static mut PCM_Sink_CreateMIDIFileEx: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    filename: *const ::std::os::raw::c_char,
                    cfg: *const ::std::os::raw::c_char,
                    cfg_sz: ::std::os::raw::c_int,
                    bpm: f64,
                    div: ::std::os::raw::c_int,
                ) -> *mut root::PCM_sink,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13PCM_Sink_EnumE"]
            pub static mut PCM_Sink_Enum: ::std::option::Option<
                unsafe extern "C" fn(
                    idx: ::std::os::raw::c_int,
                    descstrOut: *mut *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_uint,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21PCM_Sink_GetExtensionE"]
            pub static mut PCM_Sink_GetExtension: ::std::option::Option<
                unsafe extern "C" fn(
                    data: *const ::std::os::raw::c_char,
                    data_sz: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19PCM_Sink_ShowConfigE"]
            pub static mut PCM_Sink_ShowConfig: ::std::option::Option<
                unsafe extern "C" fn(
                    cfg: *const ::std::os::raw::c_char,
                    cfg_sz: ::std::os::raw::c_int,
                    hwndParent: root::HWND,
                ) -> root::HWND,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25PCM_Source_CreateFromFileE"]
            pub static mut PCM_Source_CreateFromFile: ::std::option::Option<
                unsafe extern "C" fn(
                    filename: *const ::std::os::raw::c_char,
                ) -> *mut root::PCM_source,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27PCM_Source_CreateFromFileExE"]
            pub static mut PCM_Source_CreateFromFileEx: ::std::option::Option<
                unsafe extern "C" fn(
                    filename: *const ::std::os::raw::c_char,
                    forcenoMidiImp: bool,
                ) -> *mut root::PCM_source,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27PCM_Source_CreateFromSimpleE"]
            pub static mut PCM_Source_CreateFromSimple: ::std::option::Option<
                unsafe extern "C" fn(
                    dec: *mut root::ISimpleMediaDecoder,
                    fn_: *const ::std::os::raw::c_char,
                ) -> *mut root::PCM_source,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25PCM_Source_CreateFromTypeE"]
            pub static mut PCM_Source_CreateFromType: ::std::option::Option<
                unsafe extern "C" fn(
                    sourcetype: *const ::std::os::raw::c_char,
                ) -> *mut root::PCM_source,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18PCM_Source_DestroyE"]
            pub static mut PCM_Source_Destroy:
                ::std::option::Option<unsafe extern "C" fn(src: *mut root::PCM_source)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19PCM_Source_GetPeaksE"]
            pub static mut PCM_Source_GetPeaks: ::std::option::Option<
                unsafe extern "C" fn(
                    src: *mut root::PCM_source,
                    peakrate: f64,
                    starttime: f64,
                    numchannels: ::std::os::raw::c_int,
                    numsamplesperchannel: ::std::os::raw::c_int,
                    want_extra_type: ::std::os::raw::c_int,
                    buf: *mut f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25PCM_Source_GetSectionInfoE"]
            pub static mut PCM_Source_GetSectionInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    src: *mut root::PCM_source,
                    offsOut: *mut f64,
                    lenOut: *mut f64,
                    revOut: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16PeakBuild_CreateE"]
            pub static mut PeakBuild_Create: ::std::option::Option<
                unsafe extern "C" fn(
                    src: *mut root::PCM_source,
                    fn_: *const ::std::os::raw::c_char,
                    srate: ::std::os::raw::c_int,
                    nch: ::std::os::raw::c_int,
                ) -> *mut root::REAPER_PeakBuild_Interface,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18PeakBuild_CreateExE"]
            pub static mut PeakBuild_CreateEx: ::std::option::Option<
                unsafe extern "C" fn(
                    src: *mut root::PCM_source,
                    fn_: *const ::std::os::raw::c_char,
                    srate: ::std::os::raw::c_int,
                    nch: ::std::os::raw::c_int,
                    flags: ::std::os::raw::c_int,
                ) -> *mut root::REAPER_PeakBuild_Interface,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14PeakGet_CreateE"]
            pub static mut PeakGet_Create: ::std::option::Option<
                unsafe extern "C" fn(
                    fn_: *const ::std::os::raw::c_char,
                    srate: ::std::os::raw::c_int,
                    nch: ::std::os::raw::c_int,
                ) -> *mut root::REAPER_PeakGet_Interface,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21PitchShiftSubModeMenuE"]
            pub static mut PitchShiftSubModeMenu: ::std::option::Option<
                unsafe extern "C" fn(
                    hwnd: root::HWND,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    mode: ::std::os::raw::c_int,
                    submode_sel: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11PlayPreviewE"]
            pub static mut PlayPreview: ::std::option::Option<
                unsafe extern "C" fn(
                    preview: *mut root::preview_register_t,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13PlayPreviewExE"]
            pub static mut PlayPreviewEx: ::std::option::Option<
                unsafe extern "C" fn(
                    preview: *mut root::preview_register_t,
                    bufflags: ::std::os::raw::c_int,
                    MSI: f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16PlayTrackPreviewE"]
            pub static mut PlayTrackPreview: ::std::option::Option<
                unsafe extern "C" fn(
                    preview: *mut root::preview_register_t,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17PlayTrackPreview2E"]
            pub static mut PlayTrackPreview2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    preview: *mut root::preview_register_t,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19PlayTrackPreview2ExE"]
            pub static mut PlayTrackPreview2Ex: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    preview: *mut root::preview_register_t,
                    flags: ::std::os::raw::c_int,
                    msi: f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13plugin_getapiE"]
            pub static mut plugin_getapi: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20plugin_getFilterListE"]
            pub static mut plugin_getFilterList:
                ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions37plugin_getImportableProjectFilterListE"]
            pub static mut plugin_getImportableProjectFilterList:
                ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15plugin_registerE"]
            pub static mut plugin_register: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                    infostruct: *mut ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22PluginWantsAlwaysRunFxE"]
            pub static mut PluginWantsAlwaysRunFx:
                ::std::option::Option<unsafe extern "C" fn(amt: ::std::os::raw::c_int)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16PreventUIRefreshE"]
            pub static mut PreventUIRefresh:
                ::std::option::Option<unsafe extern "C" fn(prevent_count: ::std::os::raw::c_int)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22projectconfig_var_addrE"]
            pub static mut projectconfig_var_addr: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    idx: ::std::os::raw::c_int,
                ) -> *mut ::std::os::raw::c_void,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25projectconfig_var_getoffsE"]
            pub static mut projectconfig_var_getoffs: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                    szOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15realloc_cmd_ptrE"]
            pub static mut realloc_cmd_ptr: ::std::option::Option<
                unsafe extern "C" fn(
                    ptr: *mut *mut ::std::os::raw::c_char,
                    ptr_size: *mut ::std::os::raw::c_int,
                    new_size: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22ReaperGetPitchShiftAPIE"]
            pub static mut ReaperGetPitchShiftAPI: ::std::option::Option<
                unsafe extern "C" fn(
                    version: ::std::os::raw::c_int,
                ) -> *mut root::IReaperPitchShift,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14ReaScriptErrorE"]
            pub static mut ReaScriptError:
                ::std::option::Option<unsafe extern "C" fn(errmsg: *const ::std::os::raw::c_char)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24RecursiveCreateDirectoryE"]
            pub static mut RecursiveCreateDirectory: ::std::option::Option<
                unsafe extern "C" fn(
                    path: *const ::std::os::raw::c_char,
                    ignored: usize,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17reduce_open_filesE"]
            pub static mut reduce_open_files: ::std::option::Option<
                unsafe extern "C" fn(flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14RefreshToolbarE"]
            pub static mut RefreshToolbar:
                ::std::option::Option<unsafe extern "C" fn(command_id: ::std::os::raw::c_int)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15RefreshToolbar2E"]
            pub static mut RefreshToolbar2: ::std::option::Option<
                unsafe extern "C" fn(
                    section_id: ::std::os::raw::c_int,
                    command_id: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11relative_fnE"]
            pub static mut relative_fn: ::std::option::Option<
                unsafe extern "C" fn(
                    in_: *const ::std::os::raw::c_char,
                    out: *mut ::std::os::raw::c_char,
                    out_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15RemoveTrackSendE"]
            pub static mut RemoveTrackSend: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    category: ::std::os::raw::c_int,
                    sendidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17RenderFileSectionE"]
            pub static mut RenderFileSection: ::std::option::Option<
                unsafe extern "C" fn(
                    source_filename: *const ::std::os::raw::c_char,
                    target_filename: *const ::std::os::raw::c_char,
                    start_percent: f64,
                    end_percent: f64,
                    playrate: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21ReorderSelectedTracksE"]
            pub static mut ReorderSelectedTracks: ::std::option::Option<
                unsafe extern "C" fn(
                    beforeTrackIdx: ::std::os::raw::c_int,
                    makePrevFolder: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18Resample_EnumModesE"]
            pub static mut Resample_EnumModes: ::std::option::Option<
                unsafe extern "C" fn(mode: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16Resampler_CreateE"]
            pub static mut Resampler_Create: ::std::option::Option<
                unsafe extern "C" fn() -> *mut root::REAPER_Resample_Interface,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10resolve_fnE"]
            pub static mut resolve_fn: ::std::option::Option<
                unsafe extern "C" fn(
                    in_: *const ::std::os::raw::c_char,
                    out: *mut ::std::os::raw::c_char,
                    out_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11resolve_fn2E"]
            pub static mut resolve_fn2: ::std::option::Option<
                unsafe extern "C" fn(
                    in_: *const ::std::os::raw::c_char,
                    out: *mut ::std::os::raw::c_char,
                    out_sz: ::std::os::raw::c_int,
                    checkSubDirOptional: *const ::std::os::raw::c_char,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25ReverseNamedCommandLookupE"]
            pub static mut ReverseNamedCommandLookup: ::std::option::Option<
                unsafe extern "C" fn(
                    command_id: ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21ScaleFromEnvelopeModeE"]
            pub static mut ScaleFromEnvelopeMode: ::std::option::Option<
                unsafe extern "C" fn(scaling_mode: ::std::os::raw::c_int, val: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19ScaleToEnvelopeModeE"]
            pub static mut ScaleToEnvelopeMode: ::std::option::Option<
                unsafe extern "C" fn(scaling_mode: ::std::os::raw::c_int, val: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18screenset_registerE"]
            pub static mut screenset_register: ::std::option::Option<
                unsafe extern "C" fn(
                    id: *mut ::std::os::raw::c_char,
                    callbackFunc: *mut ::std::os::raw::c_void,
                    param: *mut ::std::os::raw::c_void,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21screenset_registerNewE"]
            pub static mut screenset_registerNew: ::std::option::Option<
                unsafe extern "C" fn(
                    id: *mut ::std::os::raw::c_char,
                    callbackFunc: root::screensetNewCallbackFunc,
                    param: *mut ::std::os::raw::c_void,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20screenset_unregisterE"]
            pub static mut screenset_unregister:
                ::std::option::Option<unsafe extern "C" fn(id: *mut ::std::os::raw::c_char)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27screenset_unregisterByParamE"]
            pub static mut screenset_unregisterByParam:
                ::std::option::Option<unsafe extern "C" fn(param: *mut ::std::os::raw::c_void)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25screenset_updateLastFocusE"]
            pub static mut screenset_updateLastFocus:
                ::std::option::Option<unsafe extern "C" fn(prevWin: root::HWND)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19SectionFromUniqueIDE"]
            pub static mut SectionFromUniqueID: ::std::option::Option<
                unsafe extern "C" fn(uniqueID: ::std::os::raw::c_int) -> *mut root::KbdSectionInfo,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19SelectAllMediaItemsE"]
            pub static mut SelectAllMediaItems: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject, selected: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21SelectProjectInstanceE"]
            pub static mut SelectProjectInstance:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19SendLocalOscMessageE"]
            pub static mut SendLocalOscMessage: ::std::option::Option<
                unsafe extern "C" fn(
                    local_osc_handler: *mut ::std::os::raw::c_void,
                    msg: *const ::std::os::raw::c_char,
                    msglen: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13SetActiveTakeE"]
            pub static mut SetActiveTake:
                ::std::option::Option<unsafe extern "C" fn(take: *mut root::MediaItem_Take)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17SetAutomationModeE"]
            pub static mut SetAutomationMode: ::std::option::Option<
                unsafe extern "C" fn(mode: ::std::os::raw::c_int, onlySel: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13SetCurrentBPME"]
            pub static mut SetCurrentBPM: ::std::option::Option<
                unsafe extern "C" fn(__proj: *mut root::ReaProject, bpm: f64, wantUndo: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16SetCursorContextE"]
            pub static mut SetCursorContext: ::std::option::Option<
                unsafe extern "C" fn(
                    mode: ::std::os::raw::c_int,
                    envInOptional: *mut root::TrackEnvelope,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13SetEditCurPosE"]
            pub static mut SetEditCurPos: ::std::option::Option<
                unsafe extern "C" fn(time: f64, moveview: bool, seekplay: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14SetEditCurPos2E"]
            pub static mut SetEditCurPos2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    time: f64,
                    moveview: bool,
                    seekplay: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16SetEnvelopePointE"]
            pub static mut SetEnvelopePoint: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    ptidx: ::std::os::raw::c_int,
                    timeInOptional: *mut f64,
                    valueInOptional: *mut f64,
                    shapeInOptional: *mut ::std::os::raw::c_int,
                    tensionInOptional: *mut f64,
                    selectedInOptional: *mut bool,
                    noSortInOptional: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18SetEnvelopePointExE"]
            pub static mut SetEnvelopePointEx: ::std::option::Option<
                unsafe extern "C" fn(
                    envelope: *mut root::TrackEnvelope,
                    autoitem_idx: ::std::os::raw::c_int,
                    ptidx: ::std::os::raw::c_int,
                    timeInOptional: *mut f64,
                    valueInOptional: *mut f64,
                    shapeInOptional: *mut ::std::os::raw::c_int,
                    tensionInOptional: *mut f64,
                    selectedInOptional: *mut bool,
                    noSortInOptional: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21SetEnvelopeStateChunkE"]
            pub static mut SetEnvelopeStateChunk: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut root::TrackEnvelope,
                    str: *const ::std::os::raw::c_char,
                    isundoOptional: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11SetExtStateE"]
            pub static mut SetExtState: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *const ::std::os::raw::c_char,
                    key: *const ::std::os::raw::c_char,
                    value: *const ::std::os::raw::c_char,
                    persist: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27SetGlobalAutomationOverrideE"]
            pub static mut SetGlobalAutomationOverride:
                ::std::option::Option<unsafe extern "C" fn(mode: ::std::os::raw::c_int)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17SetItemStateChunkE"]
            pub static mut SetItemStateChunk: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    str: *const ::std::os::raw::c_char,
                    isundoOptional: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24SetMasterTrackVisibilityE"]
            pub static mut SetMasterTrackVisibility: ::std::option::Option<
                unsafe extern "C" fn(flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22SetMediaItemInfo_ValueE"]
            pub static mut SetMediaItemInfo_Value: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    parmname: *const ::std::os::raw::c_char,
                    newvalue: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18SetMediaItemLengthE"]
            pub static mut SetMediaItemLength: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    length: f64,
                    refreshUI: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20SetMediaItemPositionE"]
            pub static mut SetMediaItemPosition: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    position: f64,
                    refreshUI: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20SetMediaItemSelectedE"]
            pub static mut SetMediaItemSelected: ::std::option::Option<
                unsafe extern "C" fn(item: *mut root::MediaItem, selected: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23SetMediaItemTake_SourceE"]
            pub static mut SetMediaItemTake_Source: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    source: *mut root::PCM_source,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26SetMediaItemTakeInfo_ValueE"]
            pub static mut SetMediaItemTakeInfo_Value: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    parmname: *const ::std::os::raw::c_char,
                    newvalue: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23SetMediaTrackInfo_ValueE"]
            pub static mut SetMediaTrackInfo_Value: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    parmname: *const ::std::os::raw::c_char,
                    newvalue: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17SetMIDIEditorGridE"]
            pub static mut SetMIDIEditorGrid: ::std::option::Option<
                unsafe extern "C" fn(project: *mut root::ReaProject, division: f64),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14SetMixerScrollE"]
            pub static mut SetMixerScroll: ::std::option::Option<
                unsafe extern "C" fn(leftmosttrack: *mut root::MediaTrack) -> *mut root::MediaTrack,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16SetMouseModifierE"]
            pub static mut SetMouseModifier: ::std::option::Option<
                unsafe extern "C" fn(
                    context: *const ::std::os::raw::c_char,
                    modifier_flag: ::std::os::raw::c_int,
                    action: *const ::std::os::raw::c_char,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20SetOnlyTrackSelectedE"]
            pub static mut SetOnlyTrackSelected:
                ::std::option::Option<unsafe extern "C" fn(track: *mut root::MediaTrack)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14SetProjectGridE"]
            pub static mut SetProjectGrid: ::std::option::Option<
                unsafe extern "C" fn(project: *mut root::ReaProject, division: f64),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16SetProjectMarkerE"]
            pub static mut SetProjectMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    markrgnindexnumber: ::std::os::raw::c_int,
                    isrgn: bool,
                    pos: f64,
                    rgnend: f64,
                    name: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17SetProjectMarker2E"]
            pub static mut SetProjectMarker2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    markrgnindexnumber: ::std::os::raw::c_int,
                    isrgn: bool,
                    pos: f64,
                    rgnend: f64,
                    name: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17SetProjectMarker3E"]
            pub static mut SetProjectMarker3: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    markrgnindexnumber: ::std::os::raw::c_int,
                    isrgn: bool,
                    pos: f64,
                    rgnend: f64,
                    name: *const ::std::os::raw::c_char,
                    color: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17SetProjectMarker4E"]
            pub static mut SetProjectMarker4: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    markrgnindexnumber: ::std::os::raw::c_int,
                    isrgn: bool,
                    pos: f64,
                    rgnend: f64,
                    name: *const ::std::os::raw::c_char,
                    color: ::std::os::raw::c_int,
                    flags: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23SetProjectMarkerByIndexE"]
            pub static mut SetProjectMarkerByIndex: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    markrgnidx: ::std::os::raw::c_int,
                    isrgn: bool,
                    pos: f64,
                    rgnend: f64,
                    IDnumber: ::std::os::raw::c_int,
                    name: *const ::std::os::raw::c_char,
                    color: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24SetProjectMarkerByIndex2E"]
            pub static mut SetProjectMarkerByIndex2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    markrgnidx: ::std::os::raw::c_int,
                    isrgn: bool,
                    pos: f64,
                    rgnend: f64,
                    IDnumber: ::std::os::raw::c_int,
                    name: *const ::std::os::raw::c_char,
                    color: ::std::os::raw::c_int,
                    flags: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15SetProjExtStateE"]
            pub static mut SetProjExtState: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    extname: *const ::std::os::raw::c_char,
                    key: *const ::std::os::raw::c_char,
                    value: *const ::std::os::raw::c_char,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21SetRegionRenderMatrixE"]
            pub static mut SetRegionRenderMatrix: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    regionindex: ::std::os::raw::c_int,
                    track: *mut root::MediaTrack,
                    addorremove: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18SetRenderLastErrorE"]
            pub static mut SetRenderLastError: ::std::option::Option<
                unsafe extern "C" fn(errorstr: *const ::std::os::raw::c_char),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20SetTakeStretchMarkerE"]
            pub static mut SetTakeStretchMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    idx: ::std::os::raw::c_int,
                    pos: f64,
                    srcposInOptional: *const f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25SetTakeStretchMarkerSlopeE"]
            pub static mut SetTakeStretchMarkerSlope: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    idx: ::std::os::raw::c_int,
                    slope: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21SetTempoTimeSigMarkerE"]
            pub static mut SetTempoTimeSigMarker: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    ptidx: ::std::os::raw::c_int,
                    timepos: f64,
                    measurepos: ::std::os::raw::c_int,
                    beatpos: f64,
                    bpm: f64,
                    timesig_num: ::std::os::raw::c_int,
                    timesig_denom: ::std::os::raw::c_int,
                    lineartempo: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21SetToggleCommandStateE"]
            pub static mut SetToggleCommandState: ::std::option::Option<
                unsafe extern "C" fn(
                    section_id: ::std::os::raw::c_int,
                    command_id: ::std::os::raw::c_int,
                    state: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22SetTrackAutomationModeE"]
            pub static mut SetTrackAutomationMode: ::std::option::Option<
                unsafe extern "C" fn(tr: *mut root::MediaTrack, mode: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13SetTrackColorE"]
            pub static mut SetTrackColor: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack, color: ::std::os::raw::c_int),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18SetTrackMIDILyricsE"]
            pub static mut SetTrackMIDILyrics: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    flag: ::std::os::raw::c_int,
                    str: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20SetTrackMIDINoteNameE"]
            pub static mut SetTrackMIDINoteName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: ::std::os::raw::c_int,
                    pitch: ::std::os::raw::c_int,
                    chan: ::std::os::raw::c_int,
                    name: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22SetTrackMIDINoteNameExE"]
            pub static mut SetTrackMIDINoteNameEx: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    track: *mut root::MediaTrack,
                    pitch: ::std::os::raw::c_int,
                    chan: ::std::os::raw::c_int,
                    name: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16SetTrackSelectedE"]
            pub static mut SetTrackSelected: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack, selected: bool),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22SetTrackSendInfo_ValueE"]
            pub static mut SetTrackSendInfo_Value: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    category: ::std::os::raw::c_int,
                    sendidx: ::std::os::raw::c_int,
                    parmname: *const ::std::os::raw::c_char,
                    newvalue: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17SetTrackSendUIPanE"]
            pub static mut SetTrackSendUIPan: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    send_idx: ::std::os::raw::c_int,
                    pan: f64,
                    isend: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17SetTrackSendUIVolE"]
            pub static mut SetTrackSendUIVol: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    send_idx: ::std::os::raw::c_int,
                    vol: f64,
                    isend: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18SetTrackStateChunkE"]
            pub static mut SetTrackStateChunk: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    str: *const ::std::os::raw::c_char,
                    isundoOptional: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14ShowActionListE"]
            pub static mut ShowActionList: ::std::option::Option<
                unsafe extern "C" fn(caller: *mut root::KbdSectionInfo, callerWnd: root::HWND),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14ShowConsoleMsgE"]
            pub static mut ShowConsoleMsg:
                ::std::option::Option<unsafe extern "C" fn(msg: *const ::std::os::raw::c_char)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14ShowMessageBoxE"]
            pub static mut ShowMessageBox: ::std::option::Option<
                unsafe extern "C" fn(
                    msg: *const ::std::os::raw::c_char,
                    title: *const ::std::os::raw::c_char,
                    type_: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13ShowPopupMenuE"]
            pub static mut ShowPopupMenu: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *const ::std::os::raw::c_char,
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    hwndParentOptional: root::HWND,
                    ctxOptional: *mut ::std::os::raw::c_void,
                    ctx2Optional: ::std::os::raw::c_int,
                    ctx3Optional: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions9SLIDER2DBE"]
            pub static mut SLIDER2DB: ::std::option::Option<unsafe extern "C" fn(y: f64) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10SnapToGridE"]
            pub static mut SnapToGrid: ::std::option::Option<
                unsafe extern "C" fn(project: *mut root::ReaProject, time_pos: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13SoloAllTracksE"]
            pub static mut SoloAllTracks:
                ::std::option::Option<unsafe extern "C" fn(solo: ::std::os::raw::c_int)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13Splash_GetWndE"]
            pub static mut Splash_GetWnd:
                ::std::option::Option<unsafe extern "C" fn() -> root::HWND>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14SplitMediaItemE"]
            pub static mut SplitMediaItem: ::std::option::Option<
                unsafe extern "C" fn(
                    item: *mut root::MediaItem,
                    position: f64,
                ) -> *mut root::MediaItem,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11StopPreviewE"]
            pub static mut StopPreview: ::std::option::Option<
                unsafe extern "C" fn(
                    preview: *mut root::preview_register_t,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16StopTrackPreviewE"]
            pub static mut StopTrackPreview: ::std::option::Option<
                unsafe extern "C" fn(
                    preview: *mut root::preview_register_t,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17StopTrackPreview2E"]
            pub static mut StopTrackPreview2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut ::std::os::raw::c_void,
                    preview: *mut root::preview_register_t,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12stringToGuidE"]
            pub static mut stringToGuid: ::std::option::Option<
                unsafe extern "C" fn(str: *const ::std::os::raw::c_char, g: *mut root::GUID),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16StuffMIDIMessageE"]
            pub static mut StuffMIDIMessage: ::std::option::Option<
                unsafe extern "C" fn(
                    mode: ::std::os::raw::c_int,
                    msg1: ::std::os::raw::c_int,
                    msg2: ::std::os::raw::c_int,
                    msg3: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TakeFX_AddByNameE"]
            pub static mut TakeFX_AddByName: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fxname: *const ::std::os::raw::c_char,
                    instantiate: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TakeFX_CopyToTakeE"]
            pub static mut TakeFX_CopyToTake: ::std::option::Option<
                unsafe extern "C" fn(
                    src_take: *mut root::MediaItem_Take,
                    src_fx: ::std::os::raw::c_int,
                    dest_take: *mut root::MediaItem_Take,
                    dest_fx: ::std::os::raw::c_int,
                    is_move: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TakeFX_CopyToTrackE"]
            pub static mut TakeFX_CopyToTrack: ::std::option::Option<
                unsafe extern "C" fn(
                    src_take: *mut root::MediaItem_Take,
                    src_fx: ::std::os::raw::c_int,
                    dest_track: *mut root::MediaTrack,
                    dest_fx: ::std::os::raw::c_int,
                    is_move: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13TakeFX_DeleteE"]
            pub static mut TakeFX_Delete: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19TakeFX_EndParamEditE"]
            pub static mut TakeFX_EndParamEdit: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23TakeFX_FormatParamValueE"]
            pub static mut TakeFX_FormatParamValue: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    val: f64,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions33TakeFX_FormatParamValueNormalizedE"]
            pub static mut TakeFX_FormatParamValueNormalized: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    value: f64,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22TakeFX_GetChainVisibleE"]
            pub static mut TakeFX_GetChainVisible: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15TakeFX_GetCountE"]
            pub static mut TakeFX_GetCount: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TakeFX_GetEnabledE"]
            pub static mut TakeFX_GetEnabled: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TakeFX_GetEnvelopeE"]
            pub static mut TakeFX_GetEnvelope: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fxindex: ::std::os::raw::c_int,
                    parameterindex: ::std::os::raw::c_int,
                    create: bool,
                ) -> *mut root::TrackEnvelope,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24TakeFX_GetFloatingWindowE"]
            pub static mut TakeFX_GetFloatingWindow: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    index: ::std::os::raw::c_int,
                ) -> root::HWND,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions29TakeFX_GetFormattedParamValueE"]
            pub static mut TakeFX_GetFormattedParamValue: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TakeFX_GetFXGUIDE"]
            pub static mut TakeFX_GetFXGUID: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                ) -> *mut root::GUID,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TakeFX_GetFXNameE"]
            pub static mut TakeFX_GetFXName: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TakeFX_GetIOSizeE"]
            pub static mut TakeFX_GetIOSize: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    inputPinsOutOptional: *mut ::std::os::raw::c_int,
                    outputPinsOutOptional: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25TakeFX_GetNamedConfigParmE"]
            pub static mut TakeFX_GetNamedConfigParm: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    parmname: *const ::std::os::raw::c_char,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19TakeFX_GetNumParamsE"]
            pub static mut TakeFX_GetNumParams: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TakeFX_GetOfflineE"]
            pub static mut TakeFX_GetOffline: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14TakeFX_GetOpenE"]
            pub static mut TakeFX_GetOpen: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15TakeFX_GetParamE"]
            pub static mut TakeFX_GetParam: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    minvalOut: *mut f64,
                    maxvalOut: *mut f64,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions28TakeFX_GetParameterStepSizesE"]
            pub static mut TakeFX_GetParameterStepSizes: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    stepOut: *mut f64,
                    smallstepOut: *mut f64,
                    largestepOut: *mut f64,
                    istoggleOut: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TakeFX_GetParamExE"]
            pub static mut TakeFX_GetParamEx: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    minvalOut: *mut f64,
                    maxvalOut: *mut f64,
                    midvalOut: *mut f64,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19TakeFX_GetParamNameE"]
            pub static mut TakeFX_GetParamName: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25TakeFX_GetParamNormalizedE"]
            pub static mut TakeFX_GetParamNormalized: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21TakeFX_GetPinMappingsE"]
            pub static mut TakeFX_GetPinMappings: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    isoutput: ::std::os::raw::c_int,
                    pin: ::std::os::raw::c_int,
                    high32OutOptional: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TakeFX_GetPresetE"]
            pub static mut TakeFX_GetPreset: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    presetname: *mut ::std::os::raw::c_char,
                    presetname_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21TakeFX_GetPresetIndexE"]
            pub static mut TakeFX_GetPresetIndex: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    numberOfPresetsOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions28TakeFX_GetUserPresetFilenameE"]
            pub static mut TakeFX_GetUserPresetFilename: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    fn_: *mut ::std::os::raw::c_char,
                    fn_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22TakeFX_NavigatePresetsE"]
            pub static mut TakeFX_NavigatePresets: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    presetmove: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TakeFX_SetEnabledE"]
            pub static mut TakeFX_SetEnabled: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    enabled: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25TakeFX_SetNamedConfigParmE"]
            pub static mut TakeFX_SetNamedConfigParm: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    parmname: *const ::std::os::raw::c_char,
                    value: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TakeFX_SetOfflineE"]
            pub static mut TakeFX_SetOffline: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    offline: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14TakeFX_SetOpenE"]
            pub static mut TakeFX_SetOpen: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    open: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15TakeFX_SetParamE"]
            pub static mut TakeFX_SetParam: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    val: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25TakeFX_SetParamNormalizedE"]
            pub static mut TakeFX_SetParamNormalized: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    value: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21TakeFX_SetPinMappingsE"]
            pub static mut TakeFX_SetPinMappings: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    isoutput: ::std::os::raw::c_int,
                    pin: ::std::os::raw::c_int,
                    low32bits: ::std::os::raw::c_int,
                    hi32bits: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TakeFX_SetPresetE"]
            pub static mut TakeFX_SetPreset: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    presetname: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23TakeFX_SetPresetByIndexE"]
            pub static mut TakeFX_SetPresetByIndex: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    fx: ::std::os::raw::c_int,
                    idx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11TakeFX_ShowE"]
            pub static mut TakeFX_Show: ::std::option::Option<
                unsafe extern "C" fn(
                    take: *mut root::MediaItem_Take,
                    index: ::std::os::raw::c_int,
                    showFlag: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions10TakeIsMIDIE"]
            pub static mut TakeIsMIDI: ::std::option::Option<
                unsafe extern "C" fn(take: *mut root::MediaItem_Take) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21ThemeLayout_GetLayoutE"]
            pub static mut ThemeLayout_GetLayout: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *const ::std::os::raw::c_char,
                    idx: ::std::os::raw::c_int,
                    nameOut: *mut ::std::os::raw::c_char,
                    nameOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24ThemeLayout_GetParameterE"]
            pub static mut ThemeLayout_GetParameter: ::std::option::Option<
                unsafe extern "C" fn(
                    wp: ::std::os::raw::c_int,
                    descOutOptional: *mut *const ::std::os::raw::c_char,
                    valueOutOptional: *mut ::std::os::raw::c_int,
                    defValueOutOptional: *mut ::std::os::raw::c_int,
                    minValueOutOptional: *mut ::std::os::raw::c_int,
                    maxValueOutOptional: *mut ::std::os::raw::c_int,
                ) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22ThemeLayout_RefreshAllE"]
            pub static mut ThemeLayout_RefreshAll: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21ThemeLayout_SetLayoutE"]
            pub static mut ThemeLayout_SetLayout: ::std::option::Option<
                unsafe extern "C" fn(
                    section: *const ::std::os::raw::c_char,
                    layout: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24ThemeLayout_SetParameterE"]
            pub static mut ThemeLayout_SetParameter: ::std::option::Option<
                unsafe extern "C" fn(
                    wp: ::std::os::raw::c_int,
                    value: ::std::os::raw::c_int,
                    persist: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12time_preciseE"]
            pub static mut time_precise: ::std::option::Option<unsafe extern "C" fn() -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20TimeMap2_beatsToTimeE"]
            pub static mut TimeMap2_beatsToTime: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    tpos: f64,
                    measuresInOptional: *const ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions28TimeMap2_GetDividedBpmAtTimeE"]
            pub static mut TimeMap2_GetDividedBpmAtTime: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject, time: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26TimeMap2_GetNextChangeTimeE"]
            pub static mut TimeMap2_GetNextChangeTime: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject, time: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TimeMap2_QNToTimeE"]
            pub static mut TimeMap2_QNToTime: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject, qn: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20TimeMap2_timeToBeatsE"]
            pub static mut TimeMap2_timeToBeats: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    tpos: f64,
                    measuresOutOptional: *mut ::std::os::raw::c_int,
                    cmlOutOptional: *mut ::std::os::raw::c_int,
                    fullbeatsOutOptional: *mut f64,
                    cdenomOutOptional: *mut ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TimeMap2_timeToQNE"]
            pub static mut TimeMap2_timeToQN: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject, tpos: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20TimeMap_curFrameRateE"]
            pub static mut TimeMap_curFrameRate: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    dropFrameOutOptional: *mut bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27TimeMap_GetDividedBpmAtTimeE"]
            pub static mut TimeMap_GetDividedBpmAtTime:
                ::std::option::Option<unsafe extern "C" fn(time: f64) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22TimeMap_GetMeasureInfoE"]
            pub static mut TimeMap_GetMeasureInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    measure: ::std::os::raw::c_int,
                    qn_startOut: *mut f64,
                    qn_endOut: *mut f64,
                    timesig_numOut: *mut ::std::os::raw::c_int,
                    timesig_denomOut: *mut ::std::os::raw::c_int,
                    tempoOut: *mut f64,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27TimeMap_GetMetronomePatternE"]
            pub static mut TimeMap_GetMetronomePattern: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    time: f64,
                    pattern: *mut ::std::os::raw::c_char,
                    pattern_sz: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24TimeMap_GetTimeSigAtTimeE"]
            pub static mut TimeMap_GetTimeSigAtTime: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    time: f64,
                    timesig_numOut: *mut ::std::os::raw::c_int,
                    timesig_denomOut: *mut ::std::os::raw::c_int,
                    tempoOut: *mut f64,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20TimeMap_QNToMeasuresE"]
            pub static mut TimeMap_QNToMeasures: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    qn: f64,
                    qnMeasureStartOutOptional: *mut f64,
                    qnMeasureEndOutOptional: *mut f64,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TimeMap_QNToTimeE"]
            pub static mut TimeMap_QNToTime:
                ::std::option::Option<unsafe extern "C" fn(qn: f64) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20TimeMap_QNToTime_absE"]
            pub static mut TimeMap_QNToTime_abs: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject, qn: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TimeMap_timeToQNE"]
            pub static mut TimeMap_timeToQN:
                ::std::option::Option<unsafe extern "C" fn(tpos: f64) -> f64>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20TimeMap_timeToQN_absE"]
            pub static mut TimeMap_timeToQN_abs: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject, tpos: f64) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21ToggleTrackSendUIMuteE"]
            pub static mut ToggleTrackSendUIMute: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    send_idx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19Track_GetPeakHoldDBE"]
            pub static mut Track_GetPeakHoldDB: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    channel: ::std::os::raw::c_int,
                    clear: bool,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17Track_GetPeakInfoE"]
            pub static mut Track_GetPeakInfo: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    channel: ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19TrackCtl_SetToolTipE"]
            pub static mut TrackCtl_SetToolTip: ::std::option::Option<
                unsafe extern "C" fn(
                    fmt: *const ::std::os::raw::c_char,
                    xpos: ::std::os::raw::c_int,
                    ypos: ::std::os::raw::c_int,
                    topmost: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TrackFX_AddByNameE"]
            pub static mut TrackFX_AddByName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fxname: *const ::std::os::raw::c_char,
                    recFX: bool,
                    instantiate: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TrackFX_CopyToTakeE"]
            pub static mut TrackFX_CopyToTake: ::std::option::Option<
                unsafe extern "C" fn(
                    src_track: *mut root::MediaTrack,
                    src_fx: ::std::os::raw::c_int,
                    dest_take: *mut root::MediaItem_Take,
                    dest_fx: ::std::os::raw::c_int,
                    is_move: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19TrackFX_CopyToTrackE"]
            pub static mut TrackFX_CopyToTrack: ::std::option::Option<
                unsafe extern "C" fn(
                    src_track: *mut root::MediaTrack,
                    src_fx: ::std::os::raw::c_int,
                    dest_track: *mut root::MediaTrack,
                    dest_fx: ::std::os::raw::c_int,
                    is_move: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14TrackFX_DeleteE"]
            pub static mut TrackFX_Delete: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20TrackFX_EndParamEditE"]
            pub static mut TrackFX_EndParamEdit: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24TrackFX_FormatParamValueE"]
            pub static mut TrackFX_FormatParamValue: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    val: f64,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions34TrackFX_FormatParamValueNormalizedE"]
            pub static mut TrackFX_FormatParamValueNormalized: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    value: f64,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TrackFX_GetByNameE"]
            pub static mut TrackFX_GetByName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fxname: *const ::std::os::raw::c_char,
                    instantiate: bool,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23TrackFX_GetChainVisibleE"]
            pub static mut TrackFX_GetChainVisible: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TrackFX_GetCountE"]
            pub static mut TrackFX_GetCount: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TrackFX_GetEnabledE"]
            pub static mut TrackFX_GetEnabled: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13TrackFX_GetEQE"]
            pub static mut TrackFX_GetEQ: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    instantiate: bool,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24TrackFX_GetEQBandEnabledE"]
            pub static mut TrackFX_GetEQBandEnabled: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fxidx: ::std::os::raw::c_int,
                    bandtype: ::std::os::raw::c_int,
                    bandidx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TrackFX_GetEQParamE"]
            pub static mut TrackFX_GetEQParam: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fxidx: ::std::os::raw::c_int,
                    paramidx: ::std::os::raw::c_int,
                    bandtypeOut: *mut ::std::os::raw::c_int,
                    bandidxOut: *mut ::std::os::raw::c_int,
                    paramtypeOut: *mut ::std::os::raw::c_int,
                    normvalOut: *mut f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions25TrackFX_GetFloatingWindowE"]
            pub static mut TrackFX_GetFloatingWindow: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    index: ::std::os::raw::c_int,
                ) -> root::HWND,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions30TrackFX_GetFormattedParamValueE"]
            pub static mut TrackFX_GetFormattedParamValue: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TrackFX_GetFXGUIDE"]
            pub static mut TrackFX_GetFXGUID: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                ) -> *mut root::GUID,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TrackFX_GetFXNameE"]
            pub static mut TrackFX_GetFXName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21TrackFX_GetInstrumentE"]
            pub static mut TrackFX_GetInstrument: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TrackFX_GetIOSizeE"]
            pub static mut TrackFX_GetIOSize: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    inputPinsOutOptional: *mut ::std::os::raw::c_int,
                    outputPinsOutOptional: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26TrackFX_GetNamedConfigParmE"]
            pub static mut TrackFX_GetNamedConfigParm: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    parmname: *const ::std::os::raw::c_char,
                    bufOut: *mut ::std::os::raw::c_char,
                    bufOut_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20TrackFX_GetNumParamsE"]
            pub static mut TrackFX_GetNumParams: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TrackFX_GetOfflineE"]
            pub static mut TrackFX_GetOffline: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15TrackFX_GetOpenE"]
            pub static mut TrackFX_GetOpen: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TrackFX_GetParamE"]
            pub static mut TrackFX_GetParam: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    minvalOut: *mut f64,
                    maxvalOut: *mut f64,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions29TrackFX_GetParameterStepSizesE"]
            pub static mut TrackFX_GetParameterStepSizes: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    stepOut: *mut f64,
                    smallstepOut: *mut f64,
                    largestepOut: *mut f64,
                    istoggleOut: *mut bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TrackFX_GetParamExE"]
            pub static mut TrackFX_GetParamEx: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    minvalOut: *mut f64,
                    maxvalOut: *mut f64,
                    midvalOut: *mut f64,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20TrackFX_GetParamNameE"]
            pub static mut TrackFX_GetParamName: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    buf: *mut ::std::os::raw::c_char,
                    buf_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26TrackFX_GetParamNormalizedE"]
            pub static mut TrackFX_GetParamNormalized: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                ) -> f64,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22TrackFX_GetPinMappingsE"]
            pub static mut TrackFX_GetPinMappings: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    isoutput: ::std::os::raw::c_int,
                    pin: ::std::os::raw::c_int,
                    high32OutOptional: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TrackFX_GetPresetE"]
            pub static mut TrackFX_GetPreset: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    presetname: *mut ::std::os::raw::c_char,
                    presetname_sz: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22TrackFX_GetPresetIndexE"]
            pub static mut TrackFX_GetPresetIndex: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    numberOfPresetsOut: *mut ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26TrackFX_GetRecChainVisibleE"]
            pub static mut TrackFX_GetRecChainVisible: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19TrackFX_GetRecCountE"]
            pub static mut TrackFX_GetRecCount: ::std::option::Option<
                unsafe extern "C" fn(track: *mut root::MediaTrack) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions29TrackFX_GetUserPresetFilenameE"]
            pub static mut TrackFX_GetUserPresetFilename: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    fn_: *mut ::std::os::raw::c_char,
                    fn_sz: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23TrackFX_NavigatePresetsE"]
            pub static mut TrackFX_NavigatePresets: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    presetmove: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TrackFX_SetEnabledE"]
            pub static mut TrackFX_SetEnabled: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    enabled: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24TrackFX_SetEQBandEnabledE"]
            pub static mut TrackFX_SetEQBandEnabled: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fxidx: ::std::os::raw::c_int,
                    bandtype: ::std::os::raw::c_int,
                    bandidx: ::std::os::raw::c_int,
                    enable: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TrackFX_SetEQParamE"]
            pub static mut TrackFX_SetEQParam: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fxidx: ::std::os::raw::c_int,
                    bandtype: ::std::os::raw::c_int,
                    bandidx: ::std::os::raw::c_int,
                    paramtype: ::std::os::raw::c_int,
                    val: f64,
                    isnorm: bool,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26TrackFX_SetNamedConfigParmE"]
            pub static mut TrackFX_SetNamedConfigParm: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    parmname: *const ::std::os::raw::c_char,
                    value: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18TrackFX_SetOfflineE"]
            pub static mut TrackFX_SetOffline: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    offline: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15TrackFX_SetOpenE"]
            pub static mut TrackFX_SetOpen: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    open: bool,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16TrackFX_SetParamE"]
            pub static mut TrackFX_SetParam: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    val: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions26TrackFX_SetParamNormalizedE"]
            pub static mut TrackFX_SetParamNormalized: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    param: ::std::os::raw::c_int,
                    value: f64,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions22TrackFX_SetPinMappingsE"]
            pub static mut TrackFX_SetPinMappings: ::std::option::Option<
                unsafe extern "C" fn(
                    tr: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    isoutput: ::std::os::raw::c_int,
                    pin: ::std::os::raw::c_int,
                    low32bits: ::std::os::raw::c_int,
                    hi32bits: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions17TrackFX_SetPresetE"]
            pub static mut TrackFX_SetPreset: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    presetname: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions24TrackFX_SetPresetByIndexE"]
            pub static mut TrackFX_SetPresetByIndex: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    fx: ::std::os::raw::c_int,
                    idx: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12TrackFX_ShowE"]
            pub static mut TrackFX_Show: ::std::option::Option<
                unsafe extern "C" fn(
                    track: *mut root::MediaTrack,
                    index: ::std::os::raw::c_int,
                    showFlag: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23TrackList_AdjustWindowsE"]
            pub static mut TrackList_AdjustWindows:
                ::std::option::Option<unsafe extern "C" fn(isMinor: bool)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions35TrackList_UpdateAllExternalSurfacesE"]
            pub static mut TrackList_UpdateAllExternalSurfaces:
                ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions15Undo_BeginBlockE"]
            pub static mut Undo_BeginBlock: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions16Undo_BeginBlock2E"]
            pub static mut Undo_BeginBlock2:
                ::std::option::Option<unsafe extern "C" fn(proj: *mut root::ReaProject)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13Undo_CanRedo2E"]
            pub static mut Undo_CanRedo2: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13Undo_CanUndo2E"]
            pub static mut Undo_CanUndo2: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> *const ::std::os::raw::c_char,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12Undo_DoRedo2E"]
            pub static mut Undo_DoRedo2: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12Undo_DoUndo2E"]
            pub static mut Undo_DoUndo2: ::std::option::Option<
                unsafe extern "C" fn(proj: *mut root::ReaProject) -> ::std::os::raw::c_int,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13Undo_EndBlockE"]
            pub static mut Undo_EndBlock: ::std::option::Option<
                unsafe extern "C" fn(
                    descchange: *const ::std::os::raw::c_char,
                    extraflags: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14Undo_EndBlock2E"]
            pub static mut Undo_EndBlock2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    descchange: *const ::std::os::raw::c_char,
                    extraflags: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions18Undo_OnStateChangeE"]
            pub static mut Undo_OnStateChange: ::std::option::Option<
                unsafe extern "C" fn(descchange: *const ::std::os::raw::c_char),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19Undo_OnStateChange2E"]
            pub static mut Undo_OnStateChange2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    descchange: *const ::std::os::raw::c_char,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions23Undo_OnStateChange_ItemE"]
            pub static mut Undo_OnStateChange_Item: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    name: *const ::std::os::raw::c_char,
                    item: *mut root::MediaItem,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20Undo_OnStateChangeExE"]
            pub static mut Undo_OnStateChangeEx: ::std::option::Option<
                unsafe extern "C" fn(
                    descchange: *const ::std::os::raw::c_char,
                    whichStates: ::std::os::raw::c_int,
                    trackparm: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions21Undo_OnStateChangeEx2E"]
            pub static mut Undo_OnStateChangeEx2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    descchange: *const ::std::os::raw::c_char,
                    whichStates: ::std::os::raw::c_int,
                    trackparm: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions20update_disk_countersE"]
            pub static mut update_disk_counters: ::std::option::Option<
                unsafe extern "C" fn(
                    readamt: ::std::os::raw::c_int,
                    writeamt: ::std::os::raw::c_int,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13UpdateArrangeE"]
            pub static mut UpdateArrange: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions19UpdateItemInProjectE"]
            pub static mut UpdateItemInProject:
                ::std::option::Option<unsafe extern "C" fn(item: *mut root::MediaItem)>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions14UpdateTimelineE"]
            pub static mut UpdateTimeline: ::std::option::Option<unsafe extern "C" fn()>;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions11ValidatePtrE"]
            pub static mut ValidatePtr: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *mut ::std::os::raw::c_void,
                    ctypename: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12ValidatePtr2E"]
            pub static mut ValidatePtr2: ::std::option::Option<
                unsafe extern "C" fn(
                    proj: *mut root::ReaProject,
                    pointer: *mut ::std::os::raw::c_void,
                    ctypename: *const ::std::os::raw::c_char,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions9ViewPrefsE"]
            pub static mut ViewPrefs: ::std::option::Option<
                unsafe extern "C" fn(
                    page: ::std::os::raw::c_int,
                    pageByName: *const ::std::os::raw::c_char,
                ),
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions27WDL_VirtualWnd_ScaledBlitBGE"]
            pub static mut WDL_VirtualWnd_ScaledBlitBG: ::std::option::Option<
                unsafe extern "C" fn(
                    dest: *mut root::reaper_functions::LICE_IBitmap,
                    src: *mut root::reaper_functions::WDL_VirtualWnd_BGCfg,
                    destx: ::std::os::raw::c_int,
                    desty: ::std::os::raw::c_int,
                    destw: ::std::os::raw::c_int,
                    desth: ::std::os::raw::c_int,
                    clipx: ::std::os::raw::c_int,
                    clipy: ::std::os::raw::c_int,
                    clipw: ::std::os::raw::c_int,
                    cliph: ::std::os::raw::c_int,
                    alpha: f32,
                    mode: ::std::os::raw::c_int,
                ) -> bool,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions12GetMidiInputE"]
            pub static mut GetMidiInput: ::std::option::Option<
                unsafe extern "C" fn(idx: ::std::os::raw::c_int) -> *mut root::midi_Input,
            >;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN16reaper_functions13GetMidiOutputE"]
            pub static mut GetMidiOutput: ::std::option::Option<
                unsafe extern "C" fn(idx: ::std::os::raw::c_int) -> *mut root::midi_Output,
            >;
        }
    }
    pub mod reaper_rs_control_surface {
        #[allow(unused_imports)]
        use self::super::super::root;
        extern "C" {
            pub fn add_control_surface(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> *mut root::IReaperControlSurface;
        }
        extern "C" {
            pub fn remove_control_surface(surface: *mut root::IReaperControlSurface);
        }
        extern "C" {
            pub fn GetTypeString(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            pub fn GetDescString(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            pub fn GetConfigString(
                callback_target: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char;
        }
        extern "C" {
            pub fn CloseNoReset(callback_target: *mut ::std::os::raw::c_void);
        }
        extern "C" {
            pub fn Run(callback_target: *mut ::std::os::raw::c_void);
        }
        extern "C" {
            pub fn SetTrackListChange(callback_target: *mut ::std::os::raw::c_void);
        }
        extern "C" {
            pub fn SetSurfaceVolume(
                callback_target: *mut ::std::os::raw::c_void,
                trackid: *mut root::MediaTrack,
                volume: f64,
            );
        }
        extern "C" {
            pub fn SetSurfacePan(
                callback_target: *mut ::std::os::raw::c_void,
                trackid: *mut root::MediaTrack,
                pan: f64,
            );
        }
        extern "C" {
            pub fn SetSurfaceMute(
                callback_target: *mut ::std::os::raw::c_void,
                trackid: *mut root::MediaTrack,
                mute: bool,
            );
        }
        extern "C" {
            pub fn SetSurfaceSelected(
                callback_target: *mut ::std::os::raw::c_void,
                trackid: *mut root::MediaTrack,
                selected: bool,
            );
        }
        extern "C" {
            pub fn SetSurfaceSolo(
                callback_target: *mut ::std::os::raw::c_void,
                trackid: *mut root::MediaTrack,
                solo: bool,
            );
        }
        extern "C" {
            pub fn SetSurfaceRecArm(
                callback_target: *mut ::std::os::raw::c_void,
                trackid: *mut root::MediaTrack,
                recarm: bool,
            );
        }
        extern "C" {
            pub fn SetPlayState(
                callback_target: *mut ::std::os::raw::c_void,
                play: bool,
                pause: bool,
                rec: bool,
            );
        }
        extern "C" {
            pub fn SetRepeatState(callback_target: *mut ::std::os::raw::c_void, rep: bool);
        }
        extern "C" {
            pub fn SetTrackTitle(
                callback_target: *mut ::std::os::raw::c_void,
                trackid: *mut root::MediaTrack,
                title: *const ::std::os::raw::c_char,
            );
        }
        extern "C" {
            pub fn GetTouchState(
                callback_target: *mut ::std::os::raw::c_void,
                trackid: *mut root::MediaTrack,
                isPan: ::std::os::raw::c_int,
            ) -> bool;
        }
        extern "C" {
            pub fn SetAutoMode(
                callback_target: *mut ::std::os::raw::c_void,
                mode: ::std::os::raw::c_int,
            );
        }
        extern "C" {
            pub fn ResetCachedVolPanStates(callback_target: *mut ::std::os::raw::c_void);
        }
        extern "C" {
            pub fn OnTrackSelection(
                callback_target: *mut ::std::os::raw::c_void,
                trackid: *mut root::MediaTrack,
            );
        }
        extern "C" {
            pub fn IsKeyDown(
                callback_target: *mut ::std::os::raw::c_void,
                key: ::std::os::raw::c_int,
            ) -> bool;
        }
        extern "C" {
            pub fn Extended(
                callback_target: *mut ::std::os::raw::c_void,
                call: ::std::os::raw::c_int,
                parm1: *mut ::std::os::raw::c_void,
                parm2: *mut ::std::os::raw::c_void,
                parm3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int;
        }
    }
    pub mod reaper_rs_midi {
        #[allow(unused_imports)]
        use self::super::super::root;
        extern "C" {
            pub fn MIDI_eventlist_EnumItems(
                self_: *mut root::MIDI_eventlist,
                bpos: *mut ::std::os::raw::c_int,
            ) -> *mut root::MIDI_event_t;
        }
        extern "C" {
            pub fn midi_Input_GetReadBuf(self_: *mut root::midi_Input)
            -> *mut root::MIDI_eventlist;
        }
    }
}
