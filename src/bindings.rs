/* automatically generated by rust-bindgen */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

pub const REAPER_PLUGIN_VERSION: u32 = 526;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HWND__ {
    _unused: [u8; 0],
}
pub type HWND = *mut HWND__;
pub type HINSTANCE = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ACCEL {
    pub fVirt: ::std::os::raw::c_uchar,
    pub key: ::std::os::raw::c_ushort,
    pub cmd: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_ACCEL() {
    assert_eq!(
        ::std::mem::size_of::<ACCEL>(),
        6usize,
        concat!("Size of: ", stringify!(ACCEL))
    );
    assert_eq!(
        ::std::mem::align_of::<ACCEL>(),
        2usize,
        concat!("Alignment of ", stringify!(ACCEL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ACCEL>())).fVirt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ACCEL),
            "::",
            stringify!(fVirt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ACCEL>())).key as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ACCEL),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ACCEL>())).cmd as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ACCEL),
            "::",
            stringify!(cmd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reaper_plugin_info_t {
    pub caller_version: ::std::os::raw::c_int,
    pub hwnd_main: HWND,
    pub Register: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            infostruct: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub GetFunc: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void,
    >,
}
#[test]
fn bindgen_test_layout_reaper_plugin_info_t() {
    assert_eq!(
        ::std::mem::size_of::<reaper_plugin_info_t>(),
        32usize,
        concat!("Size of: ", stringify!(reaper_plugin_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<reaper_plugin_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(reaper_plugin_info_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<reaper_plugin_info_t>())).caller_version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(reaper_plugin_info_t),
            "::",
            stringify!(caller_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reaper_plugin_info_t>())).hwnd_main as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(reaper_plugin_info_t),
            "::",
            stringify!(hwnd_main)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reaper_plugin_info_t>())).Register as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(reaper_plugin_info_t),
            "::",
            stringify!(Register)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reaper_plugin_info_t>())).GetFunc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(reaper_plugin_info_t),
            "::",
            stringify!(GetFunc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gaccel_register_t {
    pub accel: ACCEL,
    pub desc: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_gaccel_register_t() {
    assert_eq!(
        ::std::mem::size_of::<gaccel_register_t>(),
        16usize,
        concat!("Size of: ", stringify!(gaccel_register_t))
    );
    assert_eq!(
        ::std::mem::align_of::<gaccel_register_t>(),
        8usize,
        concat!("Alignment of ", stringify!(gaccel_register_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gaccel_register_t>())).accel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gaccel_register_t),
            "::",
            stringify!(accel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gaccel_register_t>())).desc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gaccel_register_t),
            "::",
            stringify!(desc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReaProject {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MediaTrack {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut EnumProjects: ::std::option::Option<
        unsafe extern "C" fn(
            idx: ::std::os::raw::c_int,
            projfnOutOptional: *mut ::std::os::raw::c_char,
            projfnOutOptional_sz: ::std::os::raw::c_int,
        ) -> *mut ReaProject,
    >;
}
extern "C" {
    pub static mut GetSetMediaTrackInfo: ::std::option::Option<
        unsafe extern "C" fn(
            tr: *mut MediaTrack,
            parmname: *const ::std::os::raw::c_char,
            setNewValue: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut GetTrack: ::std::option::Option<
        unsafe extern "C" fn(
            proj: *mut ReaProject,
            trackidx: ::std::os::raw::c_int,
        ) -> *mut MediaTrack,
    >;
}
extern "C" {
    pub static mut plugin_register: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            infostruct: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut ShowConsoleMsg:
        ::std::option::Option<unsafe extern "C" fn(msg: *const ::std::os::raw::c_char)>;
}
extern "C" {
    pub static mut ValidatePtr2: ::std::option::Option<
        unsafe extern "C" fn(
            proj: *mut ReaProject,
            pointer: *mut ::std::os::raw::c_void,
            ctypename: *const ::std::os::raw::c_char,
        ) -> bool,
    >;
}
